[[EN.Content]]
Level = 3
Title = 'Web HTML+CSS First'
HTML = '''
While there are various UI systems in the market, ZORALab's Hestia prioritizes
Web HTML+CSS first mainly as the world from 2023 are moving towards portable
computing devices like phone, tablet, watches, and even AR/VR headsets. To
ensure a system is available across each different devices under 1 single
design, network-based UI is very important than device-based version.
'''
Plain = '''
While there are various UI systems in the market, ZORALab's Hestia prioritizes
Web HTML+CSS first mainly as the world from 2023 are moving towards portable
computing devices like phone, tablet, watches, and even AR/VR headsets. To
ensure a system is available across each different devices under 1 single
design, network-based UI is very important than device-based version.
'''
Code = '''
'''

[[EN.Content.URL]]
Value = ''
Label = ''


[[ZH-HANS.Content]]
Level = 3
Title = '网络HTML+CSS优先'
HTML = '''
虽然在市场有许多的UI系统，ZORALab赫斯提亚还是会因为从2023年开始以多数人已经重用
各种不同的电子数据处理器如智能手机、平板电脑、智能手表、AR/VR智能平视显示器等等。
如果要在一种系统输出来支持每一个电子显示产品，为有网络界面才能稳重地达到目标。
'''
Plain = '''
虽然在市场有许多的UI系统，ZORALab赫斯提亚还是会因为从2023年开始以多数人已经重用
各种不同的电子数据处理器如智能手机、平板电脑、智能手表、AR/VR智能平视显示器等等。
如果要在一种系统输出来支持每一个电子显示产品，为有网络界面才能稳重地达到目标。
'''
Code = '''
'''

[[ZH-HANS.Content.URL]]
Value = ''
Label = ''




[[EN.Content]]
Level = 3
Title = 'GUI As An Option'
HTML = '''
The sole reason GUI is made available are mainly to design an product interface
for those users who are not technically backed. Hence, a product MUST be able to
perform data processing and exchange while having GUI as an optional interface
for asthetics and easy to use purposes.
'''
Plain = '''
The sole reason GUI is made available are mainly to design an product interface
for those users who are not technically-backed for it. Hence, a product MUST be
able to perform data processing and data exchange is sufficent to operate.
GUI is only enabled for the user as an option.
'''
Code = '''
'''

[[EN.Content.URL]]
Value = ''
Label = ''


[[ZH-HANS.Content]]
Level = 3
Title = 'GUI界面一定要自选性'
HTML = '''
GUI界面元件主要是给那些没有科技文学的顾客可以方便使用某个科技。如此以来，一个科技
产品必须能处理和互相交易数据就行了。然后呢，GUI界面就有用户者来自选服务就行了。
'''
Plain = '''
GUI界面元件主要是给那些没有科技文学的顾客可以方便使用某个科技。如此以来，一个科技
产品必须能处理和互相交易数据就行了。然后呢，GUI界面就有用户者来自选服务就行了。
'''
Code = '''
'''

[[ZH-HANS.Content.URL]]
Value = ''
Label = ''




[[EN.Content]]
Level = 3
Title = 'Capable of Rendering HTML, CSS, and CSS Variables List Outputs Independently'
HTML = '''
Aligning to ZORALab's Hestia main purpose, all GUI components MUST support Web
UI and WASM rendering. Hence, each leaf package is capable of rendering HTML,
CSS, and its associated CSS Variables list independently when given the same
data structure.
'''
Plain = '''
Aligning to ZORALab's Hestia main purpose, all GUI components MUST support Web
UI and WASM rendering. Hence, each leaf package is capable of rendering HTML,
CSS, and its associated CSS Variables list independently when given the same
data structure.
'''
Code = '''
'''

[[EN.Content.URL]]
Value = ''
Label = ''


[[ZH-HANS.Content]]
Level = 3
Title = '能独立地呈现HTML、CSS、和CSS变化值菜单输出数据'
HTML = '''
为了服从ZORALab赫斯提亚的主要目的，所有的界面元件一定要可以渲染输网络界面和
WASM界面为输出的成果。如此一来，所有的叶子包是可以通过它的数据架构独立地呈现
HTML、CSS、和CSS变化值菜单各自的数据。
'''
Plain = '''
为了服从ZORALab赫斯提亚的主要目的，所有的界面元件一定要可以渲染输网络界面和
WASM界面为输出的成果。如此一来，所有的叶子包是可以通过它的数据架构独立地呈现
HTML、CSS、和CSS变化值菜单各自的数据。
'''
Code = '''
'''

[[ZH-HANS.Content.URL]]
Value = ''
Label = ''




[[EN.Content]]
Level = 3
Title = 'Extended Naming Convention'
HTML = '''
Aside complying to the naming convention stated in the main spec, hestiaGUI
extends from it to include some artistic related aspects. Due to GUI being an
artwork as its core, all leaf packages shall lead with the main artist's handle
instead of the conventional <code>hestia-</code> prefix. That way, we can
automatically credit the designer.
'''
Plain = '''
Aside complying to the naming convention stated in the main spec, hestiaGUI
extends from it to include some artistic related aspects. Due to GUI being an
artwork as its core, all leaf packages shall lead with the main artist's handle
instead of the conventional 'hestia-' prefix. That way, we can automatically
credit the designer.
'''
Code = '''
'''

[[EN.Content.URL]]
Value = ''
Label = ''


[[ZH-HANS.Content]]
Level = 3
Title = '额外命名规范'
HTML = '''
除了要遵从原本的命名规范，hestiaGUI拥有额外的命名规范条例得加入遵从。由于GUI界面
是艺术设计为主，与其运用原本的hestia-带头名字，所有的叶子性格的代码包需要运用原
本艺术家的名字来代替hestia-名字。这样以来当我们运用界面元件时，我们自动已经贷记
这些艺术家了。
'''
Plain = '''
除了要遵从原本的命名规范，hestiaGUI拥有额外的命名规范条例得加入遵从。由于GUI界面
是艺术设计为主，与其运用原本的hestia-带头名字，所有的叶子性格的代码包需要运用原
本艺术家的名字来代替hestia-名字。这样以来当我们运用界面元件时，我们自动已经贷记
这些艺术家了。
'''
Code = '''
'''

[[ZH-HANS.Content.URL]]
Value = ''
Label = ''




[[EN.Content]]
Level = 3
Title = 'Common Design Practice'
HTML = '''
Normally, the design direction shall always be as little as dependency as
possible. However, for coloring and site-wide control values, it's best to use
a <code>-CORE</code> UI component to unify them instead. It's easier to maintain
and is easier to manage as well. Each commonly used components only use the
following APIs:
'''
Plain = '''
Normally, the design direction shall always be as little as dependency as
possible. However, for coloring and site-wide control values, it's best to use
a '-CORE' UI component to unify them instead. It's easier to maintain
and is easier to manage as well. Each commonly used components only use the
following APIs:
'''
Code = '''
ToCSS
ToCSS_VARIABLES
ToJS (If possible, don't use it)
'''

[[EN.Content.URL]]
Value = ''
Label = ''


[[ZH-HANS.Content]]
Level = 3
Title = '常用的设计观点'
HTML = '''
通常在界面元件设计里，尽量能依赖越少其他的元件越好。但是，如果碰到统一的数据如
颜色和控制等等，那最好是运用一个<code>-CORE</code>界面元件统一它们。这样会比较
容易修理和管理。一般的元件只运用以下的API：
'''
Plain = '''
通常在界面元件设计里，尽量能依赖越少其他的元件越好。但是，如果碰到统一的数据如
颜色和控制等等，那最好是运用一个<code>-CORE</code>界面元件统一它们。这样会比较
容易修理和管理。一般的元件只运用以下的API：
'''
Code = '''
ToCSS
ToCSS_VARIABLES
ToJS （能的话，尽量别用）
'''

[[ZH-HANS.Content.URL]]
Value = ''
Label = ''




[[EN.Content]]
Level = 3
Title = 'Debugger Design Practice'
HTML = '''
Normally, the debugger design direction shall always be <b>NO dependency and
all settings must be independent / design resistance</b>. The UI shall survive
even in brutal design deployment. All CSS variables shall be used inside its
elements and are not exported. A common one uses the following APIs:
'''
Plain = '''
Normally, the debugger design direction shall always be 'NO dependency and
all settings must be independent / design resistance'. The UI shall survive
even in brutal design deployment. All CSS variables shall be used inside its
elements and are not exported. A common one uses the following APIs:
'''
Code = '''
ToCSS
ToJS (If possible, don't use it)
ToHTML (Generate the HTML codes based on technologies)
'''

[[EN.Content.URL]]
Value = ''
Label = ''


[[ZH-HANS.Content]]
Level = 3
Title = '调试器的设计观点'
HTML = '''
通常在调试器界面元件设计里是<b>必须不能依靠任何元件和可以拥有强大的设计阻力</b>。
这种元件必须在最恐怖的设计环境里都能正常使用。
所有的CSS变化值必须是内涵性和不可以被外界自选。
一般的元件只运用以下的API：
'''
Plain = '''
通常在调试器界面元件设计里是**必须不能依靠任何元件和可以拥有强大的设计阻力**。
这种元件必须在最恐怖的设计环境里都能正常使用。
所有的CSS变化值必须是内涵性和不可以被外界自选。
一般的元件只运用以下的API：
'''
Code = '''
ToCSS
ToJS （能的话，尽量别用）
ToHTML （出产所需要的HTML代码）
'''

[[ZH-HANS.Content.URL]]
Value = ''
Label = ''
