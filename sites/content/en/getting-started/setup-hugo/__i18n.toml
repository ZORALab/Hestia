[i18n]
[i18n.Labels]
Title = 'Title'
Description = 'Description'
Code = 'Code'
URL = 'URL'
Media = 'Media'
Content = 'Content'
Label = 'Label'




[i18n.Introduction]
ID = 'introduction'
Title = 'Introduction'




[[i18n.H2]]
ID = 'learning-objectives'
Title = 'Learning Objectives'
HTML = '''
At the end of this tutorial, you will learn:
<ol>
	<li><p>How to setup Hugo compatible Git Repository</p></li>
	<li><p>How to download and setup hestiaHUGO</p></li>
	<li><p>How to start a hugo server for development</p></li>
	<li><p>How to use git along the way</p></li>
</ol>
'''
Plain = '''
At the end of this tutorial, you will learn:
(1) How to setup Hugo compatible Git Repository; AND
(2) How to download and setup hestiaHUGO; AND
(3) How to start a hugo server for development; AND
(4) How to use git along the way.
'''
Code = '''
'''

[[i18n.H2.URL]]
Label = ''
Value = ''




[[i18n.H2]]
ID = 'understanding-the-hestiahugo-way'
Title = 'Understanding The hestiaHUGO Way'
HTML = '''
Like any Hugo theme, hestiaHUGO supplies UI in its very unique way. However,
unlike any other themes, hestiaHUGO comes with its own data processor system and
rarely use most of Hugo features except its partial functions and image
processing functions. The main reason is because Hugo has a lot of output
inconsistences throughout its history. ZORALab been there the hard way and will
never make the same mistake twice. Along the web development journey, we picked
a lot of different lessons and values along the way. So, before you decide to
move forward, let's be clear about some notable non-compromising differences:
'''
Plain = '''
Like any Hugo theme, hestiaHUGO supplies UI in its very unique way. However,
unlike any other themes, hestiaHUGO comes with its own data processor system and
rarely use most of Hugo features except its partial functions and image
processing functions. The main reason is because Hugo has a lot of output
inconsistences throughout its history. ZORALab been there the hard way and will
never make the same mistake twice. Along the web development journey, we picked
a lot of different lessons and values along the way. So, before you decide to
move forward, let's be clear about some notable non-compromising differences:
'''
Code = '''
1. You won't be using Markdown; or even frankenstiening it with Hugo's
   shortcode like Hugo recommended.

2. Design strongly for writing HTML and Go template functions (equipped with
   Hugo partial functions) for maximum portabilities.

3. HTML, CSS, and JS are treated as 1 single format: **WEB**. We do not split
   them like most CSS and JS frameworks did.

4. We are still complying to the browser's end-user rendering degredation rule
   (HTML-only ➔ HTML+CSS only (e.g. JS blocker) ➔ HTML+CSS+JS), carrying no
   assumption of visitors' browsing nature.

5. All page layouts are supplied at UI component level, each with its own web
   formats (HTML, CSS, CSS Variables, JS).

6. We **COMPILE** pages; not just rendering. Each page is contained on its own.

7. At page layout level, we prioritizes HTML+CSS approach, especially when the
   very powerful CSS variables is made available.

8. We are extremely data-driven due to multiple languages support and even
   supply our own data type+value sanitization functions.
'''

[[i18n.H2.URL]]
Label = ''
Value = ''




[[i18n.H2]]
ID = 'download-the-latest-package'
Title = 'Download the Latest Package'
HTML = '''
Let's start by downloading the latest package from the ZORALab's Hestia releases
portal in its offical website via the link below. Keep in mind that you're
looking for <code>hestiaHUGO</code>.
'''
Plain = '''
Let's start by downloading the latest package from the ZORALab's Hestia releases
portal in its offical website via the link below. Keep in mind that you're
looking for 'hestiaHUGO'.
'''
Code = '''
'''

[[i18n.H2.URL]]
Label = 'Releases Portal'
Value = '/en/releases'




[[i18n.H2]]
ID = 'check-package-integrity'
Title = 'Check the Package Integrity'
HTML = '''
To make sure you had downloaded a proper and correct package, we recommend you
to check the package integrity before use. The are 2 ways to do this:
<code>GPG</code> or <code>SHASUM</code>. In this tutorial, we will be using
<code>SHASUM</code> as shown in the following code snippet. This should generate
a <b>HASHED_VALUE</b> mathematically. Your job is to make sure the
<b>HASHED_VALUE</b> is 100% exactly the same as displayed at the releases
portal.
'''
Plain = '''
To make sure you had downloaded a proper and correct package, we recommend you
to check the package integrity before use. The are 2 ways to do this: GPG or
SHASUM. In this tutorial, we will be using SHASUM as shown in the following code
snippet. This should generate a HASHED_VALUE mathematically. Your job is to make
sure the HASHED_VALUE is 100% exactly the same as displayed at the releases
portal.
'''
Code = '''
# IN UNIX OS (LINUX / MACOS)
# --------------------------
$ sha512sum hestiaHUGO-vNNNN.zip
...
[HASHED_VALUE]




# IN WINDOWS OS
# -------------
$ certutil -hashfile hestiaHUGO-vNNNN.zip sha512
...
SHA512 hash of hestiaHUGO-vNNNN.zip:
[HASHED_VALUE]
'''

[[i18n.H2.URL]]
Label = ''
Value = ''

[i18n.H2.Media]
Name = "Screenshot of Comparing SHASUM Values"
Decorative = false
Loading = 'lazy'
Width = "600"
Height = "600"
CORS = "anonymous"
Relationship = ""
Design = ""
Preload = ""
Control = false
Autoplay = false
Loop = false
Mute = false
Inline = false

[[i18n.H2.Media.Sources]]
URL = "/img/getting-started/setup-hugo/check-package-integrity-600x600.avif"
Type = "image/avif"
Media = "(min-width: 600px)"
Descriptor = '1x'

[[i18n.H2.Media.Sources]]
URL = "/img/getting-started/setup-hugo/check-package-integrity-600x600.webp"
Type = "image/webp"
Media = "(min-width: 600px)"
Descriptor = '1x'

[[i18n.H2.Media.Sources]]
URL = "/img/getting-started/setup-hugo/check-package-integrity-600x600.jpg"
Type = "image/jpeg"
Media = "(min-width: 600px)"
Descriptor = '1x'

[[i18n.H2.Media.Sources]]
URL = "/img/getting-started/setup-hugo/check-package-integrity-400x400.avif"
Type = "image/avif"
Media = "(min-width: 300px)"
Descriptor = '1x'

[[i18n.H2.Media.Sources]]
URL = "/img/getting-started/setup-hugo/check-package-integrity-400x400.webp"
Type = "image/webp"
Media = "(min-width: 300px)"
Descriptor = '1x'

[[i18n.H2.Media.Sources]]
URL = "/img/getting-started/setup-hugo/check-package-integrity-400x400.jpg"
Type = "image/jpeg"
Media = "(min-width: 300px)"
Descriptor = '1x'

[[i18n.H2.Media.Sources]]
URL = "/img/getting-started/setup-hugo/check-package-integrity-220x220.avif"
Type = "image/avif"
Media = "(max-width: 299px)"
Descriptor = '1x'

[[i18n.H2.Media.Sources]]
URL = "/img/getting-started/setup-hugo/check-package-integrity-220x220.webp"
Type = "image/webp"
Media = "(max-width: 299px)"
Descriptor = '1x'

[[i18n.H2.Media.Sources]]
URL = "/img/getting-started/setup-hugo/check-package-integrity-220x220.jpg"
Type = "image/jpeg"
Media = "(max-width: 299px)"
Descriptor = '1x'




[[i18n.H2]]
ID = 'setup-git-repository'
Title = 'Setup Git Repository'
HTML = '''
Now that you the package ready, it's time to setup your git repository. Firstly,
create and initialize your Git repo directory (for this entire tutorial, we're
calling it <code>DemoHestia</code>). In it, you can create your hugo directory
(by default, we recommend <code>sites</code>). Then, proceed to create a
<code>themes</code> directory inside it. Once done, unzip the hestiaHUGO package
into the <code>themes</code> directory. The results should be something as such:
'''
Plain = '''
Now that you the package ready, it's time to setup your git repository. Firstly,
create and initialize your Git repo directory (for this entire tutorial, we're
calling it 'DemoHestia'). In it, you can create your hugo directory (by
default, we recommend 'sites'). Then, proceed to create a 'themes' directory
inside it. Once done, unzip the hestiaHUGO package into the 'themes' directory.
The results should be something as such:
'''
Code = '''
DemoHestia/
└── sites/
    └── themes/
        └── hestiaHUGO/
            ├── config/
            ├── server.cmd
            ├── ...
            └── ... all other content ...
'''

[[i18n.H2.URL]]
Label = ''
Value = ''




[[i18n.H2]]
ID = 'setup-hugo-config-directory'
Title = 'Setup Hugo Config Directory'
HTML = '''
Due to the engine design complexities, hestiaHUGO ships its <code>config/</code>
directory and a Hugo server <code>server.cmd</code> starter script by default
inside the <code>hestiaHUGO</code> theme directory as part of the package.
You will have to move it out to the hugo directory (<code>sites/</code>) in
order to properly use it. The result should be something as such:
'''
Plain = '''
Due to the engine design complexities, hestiaHUGO ships its 'config/'
directory and a Hugo server 'server.cmd' starter script by default inside the
'hestiaHUGO' theme directory as part of the package.
You will have to move it out to the hugo directory ('sites/') in order to
properly use it. The result should be something as such:
'''
Code = '''
DemoHestia/
└── sites/
    ├── server.cmd
    │
    ├── config/
    │   ├── _default/
    │   │   ├── caches.toml
    │   │   └── config.toml
    │   ├── development/
    │   │   └── config.toml
    │   └── production/
    │       └── config.toml
    │
    └── themes/
        └── hestiaHUGO/
            └── ... all theme content ...
'''

[[i18n.H2.URL]]
Label = ''
Value = ''




[[i18n.H2]]
ID = 'configure-hugo'
Title = 'Configure Hugo'
HTML = '''
With Hugo's critical files in-place, it's time to configure Hugo. Generally
speaking, you only need to edit the 1st section of the
<code>__sites/config/_default/config.toml</code> file. The rest are as it is as
noted by the comments. You would want to setup <code>baseURL</code> to the
output base URL you're planning to publish and that's it. You may refer to
Hugo's config manual in the link below to learn more about each fields.
'''
Plain = '''
With Hugo's critical files in-place, it's time to configure Hugo. Generally
speaking, you only need to edit the 1st section of the
'__sites/config/_default/config.toml' file. The rest are as it is as
noted by the comments. You would want to setup **baseURL** to the
output base URL you're planning to publish and that's it. You may refer to
Hugo's config manual in the link below to learn more about each fields.
'''
Code = '''
DemoHestia/
└── sites/
    ├── ...
    │
    ├── config/
    │   ├── _default/
    │   │   ├── ...
    │   │   └── config.toml
    │   │
    │   └── ...
    │
    └── ...

           ⤋

# CONFIGURE THESE DATA
# ====================
baseURL = "https://hestia.zoralab.com"
theme = [
        "hestiaHUGO",
]
timeout = '10m'

archetypeDir = "archetypes"
contentDir = "content"
assetDir = "assets"
dataDir = "data"
staticDir = [
        "static",
]
layoutDir = "layouts"
themesDir = ".."
publishDir = "public"
i18nDir = "i18n"


# ╔════════════╗
# ║!!  STOP  !!║
# ╚════════════╝
!!! That's it. Don't go beyond here. You might break hestiaHUGO. !!!
...
'''

[[i18n.H2.URL]]
Label = 'Hugo Config Manual'
Value = 'https://gohugo.io/getting-started/configuration/'




[[i18n.H2]]
ID = 'start-hugo-server'
Title = 'Start Hugo Server'
HTML = '''
With everything setup ready, it's time to start a server. Due to Hugo's
inconsistency, hestiaHUGO does its optimizations and workaround wrapped under
a single <code>server.cmd</code> script. While you can start the server as
guided by Hugo, we <b>strongly discourage you to do so</b>. You can explore and
read the script we did to learn more.
'''
Plain = '''
With everything setup ready, it's time to start a server. Due to Hugo's
inconsistency, hestiaHUGO does its optimizations and workaround wrapped under
a single 'server.cmd' script. While you can start the server as
guided by Hugo, we **strongly discourage you to do so**. You can explore and
read the script we did to learn more.
'''
Code = '''
$ cd sites/         # if you haven't do so
$ ./server.cmd
'''

[[i18n.H2.URL]]
Label = ''
Value = ''




[[i18n.H2]]
ID = 'visit-preview-url'
Title = 'Visit the Preview URL Site'
HTML = '''
With the server running properly, you can visit the website using your browser
in the computer. Since we have not build anything, you should expect a blank
page or a page that keeps on redirecting to the language-specific 404 pages.
At this stage, you got a working Hugo repo with hestiaHUGO set nicely.
'''
Plain = '''
With the server running properly, you can visit the website using your browser
in the computer. Since we have not build anything, you should expect a blank
page or a page that keeps on redirecting to the language-specific 404 pages.
At this stage, you got a working Hugo repo with hestiaHUGO set nicely.
'''
Code = '''
'''

[[i18n.H2.URL]]
Label = ''
Value = ''




[[i18n.H2]]
ID = 'git-commit'
Title = 'Git Commit'
HTML = '''
Before starting to create any content, we advise you to git commit at this point
in case of future revert needs. Now let's be clear: commit the hestiaHUGO theme
together as opposed to many folks said. This is a rendering UI engine which is
more than just supplying UI codes. It's not safe to detach it from your Hugo.
'''
Plain = '''
Before starting to create any content, we advise you to git commit at this point
in case of future revert needs. Now let's be clear: commit the hestiaHUGO theme
together as opposed to many folks said. This is a rendering UI engine which is
more than just supplying UI codes. It's not safe to detach it from your Hugo.
'''
Code = '''
$ git add .
$ git commit -s

----
root: initialized hugo for site creation.

There is a need to initialize a hugo repository for building
the static website. Hence, we have to start the efforts before
building any web content. Let's do this.

This patch is created to initialize hugo in the repository.


Signed-off-by: Smith, John ❬john.smith@email.com❭
----

$ git push
'''

[[i18n.H2.URL]]
Label = ''
Value = ''




[[i18n.H2]]
ID = 'about-updating-hestiaHUGO'
Title = 'About Updating hestiaHUGO'
HTML = '''
In the future, in case you need to update the hestiaHUGO, you just need to
replace your <code>themes/hestiaHUGO</code> directory with the updated package.
Hugo reconfiguration is not required unless the release note specify it.
Remember that updating the engine may break your edge-cases inline customization
so while we try not to break backward compatibilty, you should allocate some
times to audit all your content pages' UI are updated with the latest API calls.
'''
Plain = '''
In the future, in case you need to update the hestiaHUGO, you just need to
replace your 'themes/hestiaHUGO' directory with the updated package. Hugo
reconfiguration is not required unless the release note specify it. Remember
that updating the engine may break your edge-cases inline customization so while
we try not to break backward compatibilty, you should allocate some times
to audit all your content pages' UI are updated with the latest API calls.
'''
Code = '''
DemoHestia/
└── sites/
    │
    ├── ...
    │
    └── themes/
        └── hestiaHUGO/     🡨 just replace this directory
            └── ...
'''

[[i18n.H2.URL]]
Label = ''
Value = ''




[i18n.Epilogue]
ID = 'epilogue'
Title = 'Epilogue'
Description = '''
Congrats! We have reach the end of this tutorial. At this point, you now have a
fully functional hestiaHUGO equipped Hugo repository for your frontend website
or web application construction. Please feel free to take notes before
proceeding to the next tutorial:
'''
URL = '/en/getting-started/create-basic-and-placeholder-hugo-pages'
CTA = 'Create Basic and Placeholder Hugo Pages'
