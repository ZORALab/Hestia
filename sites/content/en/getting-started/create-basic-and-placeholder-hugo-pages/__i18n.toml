[i18n]
[i18n.Labels]
Title = 'Title'
Description = 'Description'
Code = 'Code'
URL = 'URL'
Media = 'Media'
Content = 'Content'
Label = 'Label'
Level = 'Level'




[i18n.Introduction]
ID = 'introduction'
Title = 'Introduction'




[[i18n.Content]]
Level = 2
ID = 'learning-objectives'
Title = 'Learning Objectives'
HTML = '''
At the end of this tutorial, you will learn:
<ol>
	<li><p>How hestiaHUGO works with Hugo</p></li>
	<li><p>How hestiaHUGO governs filesystem pathing and URL</p></li>
	<li><p>How hestiaHUGO manage all designers' creating freedom via UI components</p></li>
	<li><p>How hestiaHUGO design to counter the ever-changing W3C changes</p></li>
	<li><p>How hestiaHUGO design its multiple outputs (HTML & JSON)</p></li>
	<li><p>How hestiaHUGO handles internationalization by default</p></li>
</ol>
'''
Plain = '''
At the end of this tutorial, you will learn:
(1) How hestiaHUGO works with Hugo; AND
(2) How hestiaHUGO governs filesystem pathing and URL; AND
(3) How hestiaHUGO manage all designers' creating freedom via UI components; AND
(4) How hestiaHUGO design to counter the ever-changing W3C changes; AND
(5) How hestiaHUGO design its multiple outputs (HTML & JSON); AND
(6) How hestiaHUGO handles internationalization by default.
'''
Code = '''
'''




[[i18n.Content]]
Level = 2
ID = 'prerequisite'
Title = 'Prerequisite'
HTML = '''
This tutorial assumes you have a fresh hestiaHUGO equipped Hugo repository ready
for deployment especially being created from the previous setup tutorial page.
Otherwise, please complete that lesson and then revert back to this piece:
'''
Plain = '''
This tutorial assumes you have a fresh hestiaHUGO equipped Hugo repository ready
for deployment especially being created from the previous setup tutorial page.
Otherwise, please complete that lesson and then revert back to this piece:
'''
Code = ''

[[i18n.Content.URL]]
Value = '/en/getting-started/setup-hugo/'
Label = 'Setup Hugo Tutorial'




[[i18n.Content]]
Level = 2
ID = 'understand-how-hestiahugo-manage-url-with-filesystem'
Title = 'Understand How hestiaHUGO Manage URL with Filesystem'
HTML = '''
hestiaHUGO natively supports its own multi-languages (a.k.a. 'i18n') feature by
default. <b>IT USES DIRECTORY NAME AS URL PATH</b> and the 1st level is
<code>ISO639-1, ISO639-2, ISO639-3, ISO15924, and ISO3166 LANGUAGE CODE</code>
or language independent pages (e.g. usually redirecting shortcuts). The rest are
the same as Hugo. We advise you to name your directory according to the URL
pattern (no space, small characters, and no funny symbols) and use it eventhough
the content is a single language to avoid building broken URL site in the
future.
'''
Plain = '''
hestiaHUGO natively supports its own multi-languages (a.k.a. 'i18n') feature by
default. IT USES DIRECTORY NAME AS URL PATH and the 1st level is
**ISO639-1, ISO639-2, ISO639-3, ISO15924, and ISO3166 LANGUAGE CODE** or
language independent pages (e.g. usually redirecting shortcuts). The rest are
the same as Hugo. We advise you to name your directory according to the URL
pattern (no space, small characters, and no funny symbols) and use it eventhough
the content is a single language to avoid building broken URL site in the
future.
'''
Code = '''
PATTERN
File path :          content/[i18n]/url-compatible-pathing/file.extension
URL       : [http://baseURL]/[i18n]/url-compatible-pathing/file.extension?query=value#tags

EXAMPLES
content/ (https://hestia.zoralab.com/)
	redirects ➔ content/en (https://hestia.zoralab.com/en)
	redirects ➔ content/zh-hans (https://hestia.zoralab.com/zh-hans/)

content/releases (https://hestia.zoralab.com/releases)
	redirects ➔ content/en/releases/ (https://hestia.zoralab.com/en/releases/)
	redirects ➔ content/zh-hans/releases/ (https://hestia.zoralab.com/zh-hans/releases/)

content/en/releases/v1-0-0/ (https://hestia.zoralab.com/en/releases/v1-0-0/)
content/en/releases/v1-1-0/ (https://hestia.zoralab.com/en/releases/v1-1-0/)
content/en/releases/v1-2-0/ (https://hestia.zoralab.com/en/releases/v1-2-0/)
content/en/releases/v1-2-0/index.html (https://hestia.zoralab.com/en/releases/v1-2-0/)
content/en/releases/v1-2-0/index.json (https://hestia.zoralab.com/en/releases/v1-2-0/index.json)
content/en/releases/v1-2-0/my-file.zip (https://hestia.zoralab.com/en/releases/v1-2-0/my-file.zip)
'''




[[i18n.Content]]
Level = 2
ID = 'create-hugo-content-directory'
Title = "Create Hugo's Content Directory"
HTML = '''
We can now start by creating the Hugo's content directory. It is named inside
your <code>config/_default/config.toml</code> under the field
<code>contentDir</code> (usually called <code>content</code>). You may alter it
as per your need. For this tutorial, we will just stick to the default
<code>content</code>. After creating the directory, you will need to
restart your hugo server (hint: <code>server.cmd</code> command). A complete
list of commands would be:
'''
Plain = '''
We can now start by creating the Hugo's content directory. It is named inside
your 'config/_default/config.toml' under the field 'contentDir' (usually called
'content'). You may alter it as per your need. For this tutorial, we will just
stick to the default 'content'. After creating the directory, you will need to
restart your hugo server (hint: `server.cmd` command). A complete list of
commands would be:
'''
Code = '''
# LINUX / MACOS
	[ Kill the server with CTRL+C ]
	$ cd sites/        # your hugo repository if you're not inside it
	$ mkdir -p content
	$ ./server.cmd     # refer pervious tutorial if you had forgotten


# WINDOWS
	[ Kill the server with CTRL+C ]
	> cd sites/        # your hugo repository if you're not inside it
	> mkdir content
	> server.cmd       # refer pervious tutorial if you had forgotten
'''




[[i18n.Content]]
Level = 2
ID = 'create-placeholder-page'
Title = 'Create Placeholder Page'
HTML = '''
We will begin by creating a single language placeholder landing page. We won't
be building this page now but we need it for the page we want to build: the 404
page. hestiaHUGO is designed in the way to be natively compatible with Hugo.
Since this is an English language tutorial, we can proceed to create
<code>content/en</code> page with hugo command. Remember this important step
because we won't repeat it again and you will be using it a lot. The command is
as shown below:
'''
Plain = '''
We will begin by creating a single language placeholder landing page. We won't
be building this page now but we need it for the page we want to build: the 404
page. hestiaHUGO is designed in the way to be natively compatible with Hugo.
Since this is an English language tutorial, we can proceed to create
'content/en' page with hugo command. Remember this important step because we
won't repeat it again and you will be using it a lot. The command is as shown
below:
'''
Code = '''
PATTERN
$ hugo new --kind hestia [filesystem path]


COMMAND
$ hugo new --kind hestia content/en
'''




[[i18n.Content]]
Level = 2
ID = 'understand-how-hestiaHUGO-manages-page-configurations'
Title = 'Understand How hestiaHUGO Manages Page Configurations'
HTML = '''
Before we continue, let's understand how hestiaHUGO manage page compilations.
If you take a look at the <code>content/en</code> page, there are a lot of
double underscore TOML files. Due to the complexities of web connectivities
across the Internet, we do not have a choice but to split them into various
pieces of config data. One constant to remember: never touch the Hugo's original
<code>_index.html</code> file. It is now <b>ONLY USE</b> for hugo to
discover and map the site directories. The way hestiaHUGO is designed
will rarely have any conflict with other Hugo themes. You're still
allowed to place any page associated files (e.g. images only this
page uses, docs, <code>.csv</code>, etc) in the same directory. Each
known files' roles and responsibilities are listed below:
'''
Plain = '''
Before we continue, let's understand how hestiaHUGO manage page compilations.
If you take a look at the `content/en` page, there are a lot of double
underscore TOML files. Due to the complexities of web connectivities across the
Internet, we do not have a choice but to split them into various pieces of
config data. One constant to remember: never touch the Hugo's original
**_index.html** file. It is now ONLY USE for hugo to discover and map the site
directories. The way hestiaHUGO is designed will rarely have any conflict with
other Hugo themes. You're still allowed to place any page associated files
(e.g. images only this page uses, docs, .csv, etc) in the same directory. Each
known files' roles and responsibilities are listed below:
'''
Code = '''
__assets.toml            ➤ manage all CSS and JS files' inclusion or compilation
__components.toml        ➤ list out all hestiaHUGO UI components for compilation
__content.hestiaCSS      ➤ the page's final CSS asset for inlining into HTML
__content.hestiaHTML     ➤ the page's HTML output
__content.hestiaJS       ➤ the page's final JS asset for inlining into HTML
__content.hestiaJSON     ➤ the page's JSON output
__content.hestiaLDJSON   ➤ the page's LD+JSON output for inlining into HTML
__contributors.toml      ➤ designate list of contributors to this page
__data.toml              ➤ a page-level data file listed in __page.toml
__i18n.toml              ➤ a page-level data file listed in __page.toml
_index.html              ➤ hugo discovery file (**DO NOT TOUCH THIS AT ALL**)
__languages.toml         ➤ the page's alternate languages URL (translated pages)
__page.toml              ➤ the page's primary configurations
__robots.toml            ➤ the page's robots instructions for inlining into HTML
__thumbnails.toml        ➤ the page's thumbnails used in social media sharing
__twitter.toml           ➤ the page's Twitter configuration for sharing
__wasm.toml              ➤ the page's WASM configurations
'''




[[i18n.Content]]
Level = 2
ID = 'update-page-toml'
Title = 'Update the __page.toml'
HTML = '''
Don't worry, for placeholding page, you only need to deal
<code>__page.toml</code> file. This is to setup the page's critical metadata.
A few critical fields you have to update are shown below:
'''
Plain = '''
Don't worry, for placeholding page, you only need to deal __page.toml file.
This is to setup the page's critical metadata. A few critical fields you have
to update are shown below:
'''
Code = """
...

[Date]
Created   = 'Sat, 05 Mar 2023 11:22:21 +0800'  # update to today's time obviously
Published = 'Sat, 05 Mar 2023 11:22:21 +0800'  # update to today's time obviously

...

[Content]
Title = 'My App Page'
Keywords = [
        'My App Page',
]

...

[Description]
Pitch = '''
TBD.
'''
Summary = '''
Will be back later.
'''

...
"""




[[i18n.Content]]
Level = 2
ID = 'git-commit-placeholder-page'
Title = 'Git Commit Placeholder Page'
HTML = '''
Now that everything is in place, you can proceed to git commit the page and we
will proceed to deal with the real basic one: <code>/en/404</code> page. If you
need assistance with Git, you can check out their offical book in the following
URL. Basically, the command is as follows:
'''
Plain = '''
Now that everything is in place, you can proceed to git commit the page and we
will proceed to deal with the real basic one: '/en/404 page'. If you need
assistance with Git, you can check out their offical book in the following URL.
Basically, the command is as follows:
'''
Code = '''
$ git add .
$ git commit -s

--- EDIT IN YOUR EDITOR ---
sites: added /en/ page as placeholder

Since we need to build /en/404/ page, we have to create the /en/ page as
placeholder for now. Hence, let's do this.

This patch adds /en/ page as placeholder in sites/ directory.


Signed-off-by: Name <EMAIL>
--- EDIT IN YOUR EDITOR ---

$ git push
'''

[[i18n.Content.URL]]
Value = 'https://git-scm.com/book/en/v2'
Label = 'Git Manual'




[[i18n.Content]]
Level = 2
ID = 'repeat-for-404-page'
Title = 'Repeat Page Creation for 404 Page'
HTML = '''
Now that you get the hang of how to create a hestiaHUGO page and updating the
critical file, as a re-cap, please create <code>/en/404 page</code> (hint:
<code>content/en/404</code> path). For this page, please <b>DO NOT commit</b>
as we will begin this page creation in the next step.
'''
Plain = '''
Now that you get the hang of how to create a hestiaHUGO page and updating the
critical file, as a re-cap, please create /en/404 page (hint: 'content/en/404'
path). For this page, please DO NOT commit as we will begin this page creation
in the next step.
'''
Code = '''
HINT
(1) $ hugo new --kind hestia [filesystem path]
(2) $ update __page.toml with the appropriate values for 404 page
(3) $ git add .
'''




[[i18n.Content]]
Level = 2
ID = 'update-page-level-twitter-settings'
Title = 'Update Page-level Twitter Settings'
HTML = '''
Unlike placeholder page, this time, if you have Twitter account, you can update
the <code>content/en/404/__twitter.toml</code> config file. Since 404 page is
just a system notice page (and no one insane enough to visit it on purpose),
you only need to update the following:
'''
Plain = '''
Unlike placeholder page, this time, if you have Twitter account, you can update
the 'content/en/404/__twitter.toml' config file. Since 404 page is just a system
notice page (and no one insane enough to visit it on purpose), you only need to
update the following:
'''
Code = '''
...

[Creator]
Handle = 'yourTwitterHandle'    # with or without @ is ok

...
'''




[[i18n.Content]]
Level = 2
ID = 'update-page-level-robots-settings'
Title = 'Update Page-level Robots Settings'
HTML = '''
Due to this page being a 404 page, we do not want any search engine robots to
index it. Hence, let's update the <code>content/en/404/__robots.toml</code>
config file. These robot values will be compiled as the page's HTML output's
meta tags. An example would be as follows:
'''
Plain = '''
Due to this page being a 404 page, we do not want any search engine robots to
index it. Hence, let's update the 'content/en/404/__robots.toml' config file.
These robot values will be compiled as the page's HTML output's meta tags. An
example would be as follows:
'''
Code = '''
...

[[Meta]]
Name = 'googleBot'
Content = 'noindex, nofollow'

[[Meta]]
Name = 'robots'
Content = 'noindex, nofollow'
'''




[[i18n.Content]]
Level = 2
ID = 'update-page-level-language-settings'
Title = 'Update Page-level Languages Settings'
HTML = '''
As a good practice and to prevent massive copy-paste error in the future, it is
better we update the page-specific language settings in the
<code>content/en/404/__languages.toml</code> config file. You're strongly
advised to use <code>RFC3986</code> compliant relative URL. We will explain
further in the next step. Here's the data to be updated:
'''
Plain = '''
As a good practice and to prevent massive copy-paste error in the future, it is
better we update the page-specific language settings in the
'content/en/404/__languages.toml' config file. You're strongly advised to use
RFC3986 compliant relative URL. We will explain further in the next step.
Here's the data to be updated:
'''
Code = '''
...

[en]
URL = '/en/404'

...
'''




[[i18n.Content]]
Level = 2
ID = 'understand-how-hestiahugo-process-url'
Title = 'Understand How hestiaHUGO Process URL'
HTML = '''
hestiaHUGO deploys its own URL data processor (called
<code>hestiaURL/Sanitize</code> partial function). We strongly encourage using
relative URL for pre-compilations (e.g. your page templates and etc) while
letting hestiaHUGO to compile it to absolute URL as output. Visitor should
always get the absolute URL in no matter what condition. The function is
<code>RFC3986</code> compliant so be careful with your relative URL
construction. Here are the explanation examples:
'''
Plain = '''
hestiaHUGO deploys its own URL data processor (called 'hestiaURL/Sanitize'
partial function). We strongly encourage using relative URL for pre-compilations
(e.g. your page templates and etc) while letting hestiaHUGO to compile it to
absolute URL as output. Visitor should always get the absolute URL in no matter
what condition. The function is RFC3986 compliant so be careful with your
relative URL construction. Here are the explanation examples:
'''
Code = '''
EXAMPLE 1 - UNRELATED ABSOLUTE URL AS INPUT
BASE URL : https://hestia.zoralab.com/default-path
IN PAGE  : https://hestia.zoralab.com/default-path/this-page/
INPUT    : https://www.example.com/
OUTPUT   : https://www.example.com/


EXAMPLE 2 - RELATIVE TO SITE AS INPUT
BASE URL : https://hestia.zoralab.com/default-path/
IN PAGE  : https://hestia.zoralab.com/default-path/this-page/
INPUT    : /my-page
OUTPUT   : https://hestia.zoralab.com/default-path/my-page


EXAMPLE 3 - RELATIVE TO PAGE (NOTE: NO LEADING FORWARD SLASH '/')
BASE URL : https://hestia.zoralab.com/default-path/
IN PAGE  : https://hestia.zoralab.com/default-path/this-page/
INPUT    : my-page
OUTPUT   : https://hestia.zoralab.com/default-path/this-page/my-page
'''

[[i18n.Content.URL]]
Value = 'https://www.rfc-editor.org/rfc/rfc3986'
Label = 'RFC3986 URL Specification'




[[i18n.Content]]
Level = 2
ID = 'create-page-html-content'
Title = 'Create Page HTML Content'
HTML = '''
For hestiaHUGO, the corresponding file is specified in the
<code>__page.toml</code> control file's <code>Sources.HTML</code> field. The
default is the relative file <code>__content.hestiaHTML</code> in the same
directory. Since we're beginner, we should use the default
<code>__content.hestiaHTML</code> file. Let's open it and take a look. If
you're a seasoned Hugo developer, you will immediately notice that the Go
template (and Hugo's partial) functions are used instead of Hugo specific
Markdown and shortcodes. When using any ZORALab's Hestia product, we strive to
be as portable and nimble as possible across them with minimal learning cost. If
you're already familiar with Go template from Go Programming Language, then
every piece of your rendering knowledge is automatically and fully transferred
here. For this tutorial, let's update it with the following contents. Once done,
try visit the URL + /en/404/ web page presented by the Hugo server. You can
verify the HTML-only rendering of the page.
'''
Plain = '''
For hestiaHUGO, the corresponding file is specified in the __page.toml control
file's 'Sources.HTML' field. The default is the relative file
'__content.hestiaHTML' in the same directory. Since we're beginner, we should
use the default '__content.hestiaHTML' file. Let's open it and take a look. If
you're a seasoned Hugo developer, you will immediately notice that the Go
template (and Hugo's partial) functions are used instead of Hugo specific
Markdown and shortcodes. When using any ZORALab's Hestia product, we strive to
be as portable and nimble as possible across them with minimal learning cost. If
you're already familiar with Go template from Go Programming Language, then
every piece of your rendering knowledge is automatically and fully transferred
here. For this tutorial, let's update it with the following contents. Once done,
try visit the URL + /en/404/ web page presented by the Hugo server. You can
verify the HTML-only rendering of the page.
'''
Code = '''
...

{{- /* render outputs */ -}}
<main>
	<section id='introduction' class='banner'>
		<h1>{{- .Titles.Page -}}</h1>
		<p>{{- .Descriptions.Page.Pitch }} {{ .Descriptions.Page.Summary -}}</p>


		{{- $ret := merge . (dict "Input" (dict "Data" "/en/")) -}}
		{{- $ret = partial "hestiaURL/Sanitize" $ret -}}
		<a class='button' href='{{- $ret -}}'>Back HOME</a>
	</section>
</main>
'''




[[i18n.Content]]
Level = 2
ID = 'understand-how-hestiahugo-renders-page-data'
Title = 'Understand How hestiaHUGO Renders Page Data'
HTML = '''
Unlike Hugo requiring designer to guess a data field, hestiaHUGO employs its own
page data structure for designers to utilize. In fact, we have our some
design-adaptive debugger that shows the entire page data structure for debugging
or rendering purposes when Hugo is operating in server mode. Have you notice a
color button at the bottom right of the page? Try click on it and you can browse
your current page's entire usable datasets. Example, the rendering part of
<code>{{- .Titles.Page -}}</code> was rendered as the value of
<code>.Titles.Page</code> when viewed in the debugger console.
'''
Pitch = '''
Unlike Hugo requiring designer to guess a data field, hestiaHUGO employs its own
page data structure for designers to utilize. In fact, we have our some
design-adaptive debugger that shows the entire page data structure for debugging
or rendering purposes when Hugo is operating in server mode. Have you notice a
color button at the bottom right of the page? Try click on it and you can browse
your current page's entire usable datasets. Example, the rendering part of
'{{- .Titles.Page -}}' was rendered as the value of '.Titles.Page' when viewed
in the debugger console.
'''
Code = '''
'''


[i18n.Content.Media]
Name = "The Screenshot of the Debugger Console"
Decorative = false
Loading = 'lazy'
Width = "600"
Height = "600"
CORS = "anonymous"
Relationship = ""
Design = ""
Preload = ""
Control = false
Autoplay = false
Loop = false
Mute = false
Inline = false

[[i18n.Content.Media.Sources]]
URL = "/img/getting-started/hestiahugo-debugger-console-600x600.avif"
Type = "image/avif"
Media = "(min-width: 600px)"
Descriptor = '1x'

[[i18n.Content.Media.Sources]]
URL = "/img/getting-started/hestiahugo-debugger-console-600x600.webp"
Type = "image/webp"
Media = "(min-width: 600px)"
Descriptor = '1x'

[[i18n.Content.Media.Sources]]
URL = "/img/getting-started/hestiahugo-debugger-console-600x600.jpg"
Type = "image/jpeg"
Media = "(min-width: 600px)"
Descriptor = '1x'

[[i18n.Content.Media.Sources]]
URL = "/img/getting-started/hestiahugo-debugger-console-400x400.avif"
Type = "image/avif"
Media = "(min-width: 300px)"
Descriptor = '1x'

[[i18n.Content.Media.Sources]]
URL = "/img/getting-started/hestiahugo-debugger-console-400x400.webp"
Type = "image/webp"
Media = "(min-width: 300px)"
Descriptor = '1x'

[[i18n.Content.Media.Sources]]
URL = "/img/getting-started/hestiahugo-debugger-console-400x400.jpg"
Type = "image/jpeg"
Media = "(min-width: 300px)"
Descriptor = '1x'

[[i18n.Content.Media.Sources]]
URL = "/img/getting-started/hestiahugo-debugger-console-220x220.avif"
Type = "image/avif"
Media = "all"
Descriptor = '1x'

[[i18n.Content.Media.Sources]]
URL = "/img/getting-started/hestiahugo-debugger-console-220x220.webp"
Type = "image/webp"
Media = "all"
Descriptor = '1x'

[[i18n.Content.Media.Sources]]
URL = "/img/getting-started/hestiahugo-debugger-console-220x220.jpg"
Type = "image/jpeg"
Media = "all"
Descriptor = '1x'




[[i18n.Content]]
Level = 2
ID = 'understand-hestiahugo-data-path'
Title = 'Understand hestiaHUGO Data Path'
HTML = '''
hestiaHUGO finalized its design by having <code>content</code> directory
supplying the site URL and having each of its directory delivers the page data.
Remember the <code>__i18n.toml</code> and <code>__data.toml</code> in the page
directories? Those data files are listed in <code>__page.toml</code>'s
<code>[[Data]]</code> array list. hestiaHUGO maintains absolute freedom for
page designer to construct the Page level data structure. After parsing and
merging all the data files, all the data can be accessed via
<code>hestiaHUGO.Page</code> data field. Other config files are obviously
provide various different values for different data fields. Feel free to
explore around and check them via the on-screen debugger console. This is
how you source your data <code>key:value</code> when designing your page.
The link below is the technical specification of the
<code>hestiaHUGO.Page</code> data structure (browse when you're free, we
will move forward for now).
'''
Plain = '''
hestiaHUGO finalized its design by having 'content' directory supplying the
site URL and having each of its directory delivers the page data. Remember the
'__i18n.toml' and '__data.toml' in the page directories? Those data files are
listed in __page.toml's "[[Data]]" array list. hestiaHUGO maintains absolute
freedom for page designer to construct the Page level data structure. After
parsing and merging all the data files, all the data can be accessed via
hestiaHUGO.Page data field. Other config files are obviously provide various
different values for different data fields. Feel free to explore around and
check them via the on-screen debugger console. This is how you source your data
key:value when designing your page. The link below is the technical
specification of the hestiaHUGO.Page data structure (browse when you're free, we
will move forward for now).
'''
Code = '''
__data.toml + __i18n.toml + ...   (NOTE: follows __page.toml data files list)
             ⤋
         .Field.[...]
             ⤋
     {{- .Field.[...] -}}
'''

[[i18n.Content.URL]]
Value = '/en/specs/hestiacompilers/hestiahugo/'
Label = 'Data Structure & Specs'




[[i18n.Content]]
Level = 2
ID = 'understand-how-hestiahugo-empowers-hugo'
Title = 'Understand How hestiaHUGO Empowers Hugo'
HTML = '''
hestiaHUGO supplies its own standard libraries just like other ZORALab's Hestia
components. Notice the use of <code>hestiaURL.Sanitize</code> partial function
above? It converts a given ambigious URL into a proper full absolute URL
consistently in accoradance to hestiaHUGO URL management explained in
the 1st step. The sole purpose of preparing our own standard libraries
is to make sure we have absolute consistency as we grow ZORALab's Hestia
and not Hugo's output inconsitencies AND maintaining inter-operability
with other components. All ZORALab's Hestia libraries are documented in
the same context across all components in our specifications section.
You should explore all available hestiaHUGO API to advance your
development at your own time. For this tutorial, we will proceed further.
'''
Plain = '''
hestiaHUGO supplies its own standard libraries just like other ZORALab's Hestia
components. Notice the use of 'hestiaURL.Sanitize' partial function above? It
converts a given ambigious URL into a proper full absolute URL consistently in
accoradance to hestiaHUGO URL management explained in the 1st step. The sole
purpose of preparing our own standard libraries is to make sure we have
absolute consistency as we grow ZORALab's Hestia and not Hugo's output
inconsitencies AND maintaining inter-operability with other components. All
ZORALab's Hestia libraries are documented in the same context across all
components in our specifications section. You should explore all available
hestiaHUGO API to advance your development at your own time. For this tutorial,
we will proceed further.
'''
Code = '''
'''

[[i18n.Content.URL]]
Value = '/en/specs'
Label = 'Specification'




[[i18n.Content]]
Level = 2
ID = 'create-page-ui-components-styling-list'
Title = 'Create Page UI Components Styling List'
HTML = '''
Now that we verified the data shown in HTML-only page is correct, we can now
style it. hestiaHUGO uses the UI components approach to compile all necessary
proceed to edit <code>/en/404/__components.toml</code> and add the following
components after the commented guide. Give the server a few moment and refresh
the web page. You can see it's being compiled with styling (especially the
call-to-action anchor link). Check out the CSS codes in the CSS.Inline section
of the debugger console. It's filled with the compiled CSS codes.
'''
Plain = '''
Now that we verified the data shown in HTML-only page is correct, we can now
style it. hestiaHUGO uses the UI components approach to compile all necessary
proceed to edit '/en/404/__components.toml' and add the following components
after the commented guide. Give the server a few moment and refresh the web
page. You can see it's being compiled with styling (especially the
call-to-action anchor link). Check out the CSS codes in the CSS.Inline section
of the debugger console. It's filled with the compiled CSS codes.
'''
Code = '''
...
[[List]]
Name = "zoralabCORE"
Include = true
Variables = [
        { "--body-scroll-behavior" = "smooth" },
]

[[List]]
Name = "zoralabFONT_NOTOSANS"
Include = true
Variables = []

[[List]]
Name = "zoralabANCHOR"
Include = true
Variables = []

[[List]]
Name = "zoralabBUTTON"
Include = true
Variables = []
'''




[[i18n.Content]]
Level = 2
ID = 'understand-how-hestiaHUGO-manage-page-styling'
Title = 'Understand How hestiaHUGO Manage Page Styling'
HTML = '''
Like Backbone, Angular, and React frameworks, hestiaHUGO componentized each UI
but unlike them, hestiaHUGO only integrate each component's HTML, CSS, and JS
codes as 1 set rather than split them and overloadingly manage everything via
JavaScript. That way, via Hugo, hestiaHUGO can compile only the required CSS,
CSS variables, and JavaScript codes into the assets and then embedded them into
the HTML output file. This output HTML file is self-contained and not requiring
external remote framework, fulfilling the vision where AMP project originally
wants. It also seamlessly support PWA's offline feature as well and simplify the
UI component designer maintenance workflow by only focusing on applying
non-backward compatible updates introduced by W3C. 3 birds, 1 stone ⥤ definitely
worth the effort.
'''
Pitch = '''
Like Backbone, Angular, and React frameworks, hestiaHUGO componentized each UI
but unlike them, hestiaHUGO only integrate each component's HTML, CSS, and JS
codes as 1 set rather than split them and overloadingly manage everything via
JavaScript. That way, via Hugo, hestiaHUGO can compile only the required CSS,
CSS variables, and JavaScript codes into the assets and then embedded them into
the HTML output file. This output HTML file is self-contained and not requiring
external remote framework, fulfilling the vision where AMP project originally
wants. It also seamlessly support PWA's offline feature as well and simplify the
UI component designer maintenance workflow by only focusing on applying
non-backward compatible updates introduced by W3C. 3 birds, 1 stone ⥤ definitely
worth the effort.
'''
Code = '''
'''

[[i18n.Content.URL]]
Value = '/en/specs/hestiagui'
Label = 'UI Components Catalog'




[[i18n.Content]]
Level = 2
ID = 'understand-why-hestiaHUGO-containerized-page-styling'
Title = 'Understand Why hestiaHUGO Containerized Page Styling'
HTML = '''
This is mainly for preventing a site-wide UI update from breaking pages like
a whack-a-mole nightmare from happening again especially large content website.
We tested it and find this compilation approach is the most optimized way. So,
to scale the same UI across other pages, you just have to copy-paste the
<code>__components.toml</code> config file. For page designer regardless of
experiences, please feel safe and free to express your creativities and make
a safer mistake to gain experience with a site development.
'''
Pitch = '''
This is mainly for preventing a site-wide UI update from breaking pages like
a whack-a-mole nightmare from happening again especially large content website.
We tested it and find this compilation approach is the most optimized way. So,
to scale the same UI across other pages, you just have to copy-paste the
'__components.toml' config file. For page designer regardless of experiences,
please feel safe and free to express your creativities and make a safer mistake
to gain experience with a site development.
'''
Code = '''
'''




[[i18n.Content]]
Level = 2
ID = 'understand-how-hestiaHUGO-ui-component-works'
Title = 'Understand How hestiaHUGO UI Component Works'
HTML = '''
As stated earlier, the CSS codes are for defining the styling, the CSS variables
are for UI customziation, and the JS codes are for behavior control. When you
add an UI component, you are provided with an <code>Include</code> switch for
design debugging purpose (better then delete large chunk of codes). At the
same time, you're allowed to overwrite existing CSS variables, making
hestiaHUGO to only generate 1 list of CSS variables for your HTML output
will do.
'''
Pitch = '''
As stated earlier, the CSS codes are for defining the styling, the CSS variables
are for UI customziation, and the JS codes are for behavior control. When you
add an UI component, you are provided with an 'Include' switch for design
debugging purpose (better then delete large chunk of codes). At the same time,
you're allowed to overwrite existing CSS variables, making hestiaHUGO to only
generate 1 list of CSS variables for your HTML output will do.
'''
Code = '''
...

[[List]]
Name = "zoralabCORE"
Include = true
Variables = [
        { "--body-scroll-behavior" = "smooth" },   # this overrides the default value 'none'
]

...
'''




[[i18n.Content]]
Level = 2
ID = 'understand-why-zoralab-hestia-only-prioritize-html-and-css'
Title = "Understand Why ZORALab's Hestia Only Prioritize HTML & CSS"
HTML = '''
<p>For 2 primary reasons:</p>
<ol>
	<li><p>
		Supporting privacy-first content rendering (JS disabled).
		In year 2022 during the Covid19 pandemic, everyone was
		concerned about privacy and data leak so having a complete
		JavaScript disabled use case is totally unsurprising.
		In that situation, your famous JS Frameworks and our WASM
		are completely unsable but the site is still expected
		present correctly; AND
	</p></li>
	<li><p>
		ZORALab's Hestia intend to replace JavaScript entirely
		with WASM compiled using proper programming languages
		like Go or Nim in the future. It is a lot easier and
		seamless to port the HTML+CSS only UI component into
		the WASM counterpart (as in no JavaScript interference).
	</p></li>
</ol>
<p>
	That being said, you can still use JavaScript (as shown in later
	steps). In ZORALab's Hestia, we don't do idiotic and autocratic
	goverance like some technology's governors did that restrict
	anyone freedom of use and artistic expression.
</p>
'''
Plain = '''
For 2 primary reasons: (1) supporting privacy-first content rendering
(JS disabled). In year 2022 during the Covid19 pandemic, everyone was concerned
about privacy and data leak so having a complete JavaScript disabled use case is
totally unsurprising. In that situation, your famous JS Frameworks and our WASM
are completely unsable but the site is still expected present correctly; AND (2)
ZORALab's Hestia intend to replace JavaScript entirely with WASM compiled
using proper programming languages like Go or Nim in the future. It is a lot
easier and seamless to port the HTML+CSS only UI component into the WASM
counterpart (as in no JavaScript interference). That being said, you can
still use JavaScript (as shown in later steps). In ZORALab's Hestia, we don't do
idiotic and autocratic goverance like some technology's governors did that
restrict anyone freedom of use and artistic expression.
'''
Code = '''
'''




[[i18n.Content]]
Level = 2
ID = 'understand-zoralab-and-javascript-relationship'
Title = 'Understand ZORALab and JavaScript Relationship'
HTML = '''
Let's face it: JavaScript is the only programming language for web UI behavior
packed with weird and inconsistencies. It's problematic weaknesses gave birth to
various frameworks like Angular and Typescript of itself trying to workaround
them but introduced their own. With the birth of WASM, ZORALab wants to solve
the problem heads-on. We do not hate the language but finding development with
it comes is very risky. A lot of outdated JS frameworks in the past trying to
replace one another had already proven the point.
'''
Plain = '''
Let's face it: JavaScript is the only programming language for web UI behavior
packed with weird and inconsistencies. It's problematic weaknesses gave birth to
various frameworks like Angular and Typescript of itself trying to workaround
them but introduced their own. With the birth of WASM, ZORALab wants to solve
the problem heads-on. We do not hate the language but finding development with
it comes is very risky. A lot of outdated JS frameworks in the past trying to
replace one another had already proven the point.
'''
Code = '''
'''




[[i18n.Content]]
Level = 2
ID = 'understand-hestiahugo-future'
Title = 'Understand hestiaHUGO Future'
HTML = '''
<p>
	In order to realize our ultimate goal for web technologies, there are 3
	specific use cases:
</p>
<ol>
	<li><p>Discovery page like SEO & SMO</p></li>
	<li><p>Single App - 1 WASM implements the entire site</p></li>
	<li><p>Reactive Rendering (each page has its own WASM renderer)</p></li>
</ol>
<p>
	hestiaHUGO fulfills primarily on use case: while facilitating WASM
	hosting for use cases (2) and (3). That's why we are still facilitating
	Hugo and so far it is still the best frontend static site generator
	(and now, a compiler).
</p>
'''
Plain = '''
In order to realize our ultimate goal for web technologies, there are 3 specific
use cases: (1) Discovery page like SEO & SMO; (2) Single App - 1 WASM implements
the entire site; and (3) Reactive Rendering (each page has its own WASM
renderer). hestiaHUGO fulfills primarily on use case (1) while facilitating WASM
hosting for use cases (2) and (3). That's why we are still facilitating Hugo and
so far it is still the best frontend static site generator (and now, a
compiler).
'''
Code = '''
'''




[[i18n.Content]]
Level = 2
ID = 'customizing-page-styling-with-css'
Title = 'Customize Page Styling with CSS'
HTML = '''
Now that the page is styled (that looks common across all users), you can
customize on top the currently compiled CSS codes. Simply edit the file
<code>__content.hestiaCSS</code> and place your page-level CSS codes in it.
For this tutorial, we will be using the following CSS customization codes.
hestiaHUGO will recompile your CSS file as the last inline-type asset.
Once done, refresh the page and you'll observe your 404 page is
disco-ing with colors.
'''
Plain = '''
Now that the page is styled (that looks common across all users), you can
customize on top the currently compiled CSS codes. Simply edit the file
'__content.hestiaCSS' and place your page-level CSS codes in it. For this
tutorial, we will be using the following CSS customization codes. hestiaHUGO
will recompile your CSS file as the last inline-type asset. Once done, refresh
the page and you'll observe your 404 page is disco-ing with colors.
'''
Code = '''
main {
	height: 100vh;
	width: 100vw;

	 isplay: flex;
	justify-content: center;
	align-items: center;

	background: linear-gradient(245deg,
					#192fe3,
					#19e33b,
					#bbe319,
					#e35019,
					#e31919,
					#e319c1);
	background-size: 1200% 1200%;

	animation: BgDiscoFlasher 4s ease infinite;
}

@keyframes BgDiscoFlasher {
	0%{background-position:0% 86%}
	50%{background-position:100% 15%}
	100%{background-position:0% 86%}
}

.banner {
	width: 50%;
	max-height: fit-content;

	padding: 5rem;
	border-radius: 2rem;

	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;

	background: rgba(255, 255, 255, .75);
}
'''




[[i18n.Content]]
Level = 2
ID = 'customizing-page-with-javascript'
Title = 'Customize Page with JavaScript'
HTML = '''
Likewise, you can also customize the page with JavaScript. The responsible file
is <code>__content.hestiaJS</code>. While the page is no longer needing further
styling, for this education purpose, let's temporarily add the following code
block in and check out the browser' inspect console (F12 button). You should
observe a cat meowing. Same case: this JavaScript is the last inline JavaScript
to be included in the page.
'''
Plain = '''
Likewise, you can also customize the page with JavaScript. The responsible file
is '__content.hestiaJS'. While the page is no longer needing further styling,
for this education purpose, let's temporarily add the following code block in
and check out the browser' inspect console (F12 button). You should observe a
cat meowing. Same case: this JavaScript is the last inline JavaScript to be
included in the page.
'''
Code = '''
window.onload = function() {
	console.log("\nMeow~~~~ ₍⌯ᴖⱅᴖ⌯ ^₎◞ ̑̑ෆ⃛ \n\n");
};
'''


[i18n.Content.Image]
Name = "The Screenshot of a Cat Meowing at the Browser Console"
Decorative = false
Loading = 'lazy'
Width = "600"
Height = "600"
CORS = "anonymous"
Relationship = ""
Design = ""
Preload = ""
Control = false
Autoplay = false
Loop = false
Mute = false
Inline = false

[[i18n.Content.Image.Sources]]
URL = "/img/getting-started/js-output-600x600.avif"
Type = "image/avif"
Media = "(min-width: 600px)"
Descriptor = '1x'

[[i18n.Content.Image.Sources]]
URL = "/img/getting-started/js-output-600x600.webp"
Type = "image/webp"
Media = "(min-width: 600px)"
Descriptor = '1x'

[[i18n.Content.Image.Sources]]
URL = "/img/getting-started/js-output-600x600.jpg"
Type = "image/jpeg"
Media = "(min-width: 600px)"
Descriptor = '1x'

[[i18n.Content.Image.Sources]]
URL = "/img/getting-started/js-output-400x400.avif"
Type = "image/avif"
Media = "(min-width: 300px)"
Descriptor = '1x'

[[i18n.Content.Image.Sources]]
URL = "/img/getting-started/js-output-400x400.webp"
Type = "image/webp"
Media = "(min-width: 300px)"
Descriptor = '1x'

[[i18n.Content.Image.Sources]]
URL = "/img/getting-started/js-output-400x400.jpg"
Type = "image/jpeg"
Media = "(min-width: 300px)"
Descriptor = '1x'

[[i18n.Content.Image.Sources]]
URL = "/img/getting-started/js-output-220x220.avif"
Type = "image/avif"
Media = "all"
Descriptor = '1x'

[[i18n.Content.Image.Sources]]
URL = "/img/getting-started/js-output-220x220.webp"
Type = "image/webp"
Media = "all"
Descriptor = '1x'

[[i18n.Content.Image.Sources]]
URL = "/img/getting-started/js-output-220x220.jpg"
Type = "image/jpeg"
Media = "all"
Descriptor = '1x'




[[i18n.Content]]
Level = 2
ID = 'update-ldjson-data-for-seo'
Title = 'Update LD+JSON Data for SEO'
HTML = '''
hestiaHUGO has a built-in support for Schema.org complex data structuring of
your page. The responsible file is <code>__content.hestiaLDJSON</code>. Since
this is a 404 page, we will add the following code block will do. Once the
Hugo server is fully updated, you can proceed to obtain the output from our
on-screen debugger console and validate at Schema.org validator site.
'''
Plain = '''
hestiaHUGO has a built-in support for Schema.org complex data structuring of
your page. The responsible file is '__content.hestiaLDJSON'. Since this is a 404
page, we will add the following code block will do. Once the Hugo server is fully
updated, you can proceed to obtain the output from our on-screen debugger
console and validate at Schema.org validator site.
'''
Code = '''
...
{{- /* prepare variables for function */ -}}
...



{{- /* execute function */ -}}
{{- $dataList = merge $dataList (partial "hestiaJSON/schemaorgLDJSON/WebPage" .) -}}




{{- /* render output */ -}}
...
'''

[[i18n.Content.URL]]
Value = 'https://validator.schema.org/'
Label = 'LD+JSON Validator'




[[i18n.Content]]
Level = 2
ID = 'understand-how-hestiahugo-handles-ldjson'
Title = 'Understand How hestiaHUGO Handles LD+JSON'
HTML = '''
To maintain balance between freedom of expression and rigidity for consistent
output, there are 2 things to remember:
<ol>
	<li><p>
		hestiaHUGO can only quickly help you process the base
		level dataset of known common data types (e.g. authors,
		page type, etc); and
	</p></li>
	<li><p>
		you need to add in the page context-specific dataset
		(e.g. recipe steps, etc).
	</p></li>
</ol>
'''
Plain = '''
To maintain balance between freedom of expression and rigidity for consistent
output, there are 2 things to remember: (1) hestiaHUGO can only quickly help you
process the base level dataset of known common data types (e.g. authors,
page type, etc); and (2) you need to add in the page context-specific dataset
(e.g. recipe steps, etc).
'''
Code = '''
'''

[[i18n.Content.URL]]
Value = 'https://schema.org/docs/full.html'
Label = 'Schema.org Data Structures'




[[i18n.Content]]
Level = 2
ID = 'stage-the-current-state'
Title = 'Stage the Current State'
HTML = '''
Now the HTML output is done deal, we should git stage it. However, we are not
quite done yet. Proceed to next step:
'''
Plain = '''
Now the HTML output is done deal, we should git stage it. However, we are not
quite done yet. Proceed to next step:
'''
Code = '''
HINT
$ git add .
'''




[[i18n.Content]]
Level = 2
ID = 'create-json-output'
Title = 'Create JSON Output'
HTML = '''
By default, hestiaHUGO supports JSON output type as secondary output format.
This is using the hestiaHUGO internal feature; not the Hugo one. Like LD+JSON,
you can construct a customer usable dataset using the Go template function.
Unlike LD+JSON, this is a pure JSON output (viewable by appending
<code>index.json</code> at the end of the page URL) unrestricted by Schema.org
schematic. The responsible file defined by <code>__page.toml</code>'s
<code>.Source.JSON</code> value (default is the relative
<code>__content.hestiaJSON</code>). Since this is 404 page, we can leave
it as it is. You can study the default codes for educational purposes.
'''
Plain = '''
By default, hestiaHUGO supports JSON output type as secondary output format.
This is using the hestiaHUGO internal feature; not the Hugo one. Like LD+JSON,
you can construct a customer usable dataset using the Go template function.
Unlike LD+JSON, this is a pure JSON output (viewable by appending 'index.json'
at the end of the page URL) unrestricted by Schema.org schematic. The
responsible file defined by '__page.toml's '.Source.JSON' value (default is the
relative '__content.hestiaJSON'). Since this is 404 page, we can leave it as it
is. You can study the default codes for educational purposes.
'''
Code = '''
'''




[[i18n.Content]]
Level = 2
ID = 'understand-why-hestiahugo-natively-supports-json-output'
Title = 'Understand Why hestiaHUGO Natively Supports JSON Output'
HTML = '''
<p>5 main reasons:</p>
<ol>
	<li><p>
		Allows one to use hestiaHUGO as a CDN-driven open data API
		server; AND
	</p></li>
	<li><p>
		A backup reason for using Hugo after search engine giants
		nearly destroyed SEO in the past solely for SMO ad
		revenues; AND
	</p></li>
	<li><p>
		Provides alternatives and freedom compared to LD+JSON
		implementations; AND
	</p></li>
	<li><p>
		making sure hestiaHUGO can support multiple output
		feature natively in a very consistent manner; AND
	</p></li>
	<li><p>
		Facilitate a way to feed AI training data.
	</p></li>
<p>
	The default processor is configured in a way as an option for
	those who do not want to use it so if you're not using it,
	don't bother touching <code>__content.hestiaJSON</code> file at all.
</p>
'''
Plain = '''
5 main reasons: (1) Allows one to use hestiaHUGO as a CDN-driven open data API
server; AND (2) A backup reason for using Hugo after search engine giants
nearly destroyed SEO in the past solely for SMO ad revenues; AND
(3) Provides alternatives and freedom compared to LD+JSON implementations; AND
(4) making sure hestiaHUGO can support multiple output feature natively
in a very consistent manner; AND (5) Facilitate a way to feed AI
training data. The default processor is configured in a way as an option
for those who do not want to use it so if you're not using it, don't
bother touching <code>__content.hestiaJSON</code> file at all.
'''
Code = '''
'''




[[i18n.Content]]
Level = 2
ID = 'commit-and-push'
Title = 'Commit and Push'
HTML = '''
At this point, we had completed designing a basic and simple 404 page. You can
proceed to Git commit and push out.
'''
Plain = '''
At this point, we had completed designing a basic and simple 404 page. You can
proceed to Git commit and push out.
'''
Code = '''
HINT
$ git add .
$ git commit -s
----
... write a good git message as shown in previous tutorial ...
----
$ git push
'''




[[i18n.Content]]
Level = 2
ID = 'remember-the-strength-of-hestiaHUGO'
Title = 'Remember the Strength of hestiaHUGO'
HTML = '''
If you haven't realize, hestiaHUGO only takes 1 set of input dataset and
generated to various outputs type while supporting multiple languages at the
same time. In fact, it generates more like page-level 'sitemap.xml' and
'sitemap-page.xml' as well. This is one of the problem we're trying to solve when
using Hugo: 1 consistent input dataset to multiple outputs consistently. These
are just a scratch of the surface. We will explore more as you go through the
tutorials walkthrough.
'''
Plain = '''
If you haven't realize, hestiaHUGO only takes 1 set of input dataset and
generated to various outputs type while supporting multiple languages at the
same time. In fact, it generates more like page-level 'sitemap.xml' and
'sitemap-page.xml' as well. This is one of the problem we're trying to solve when
using Hugo: 1 consistent input dataset to multiple outputs consistently. These
are just a scratch of the surface. We will explore more as you go through the
tutorials walkthrough.
'''
Code = '''
'''




[[i18n.Content]]
Level = 2
ID = 'whats-next'
Title = "What's Next?"
HTML = '''
Now that we had completed the hestiaHUGO setup, the next step is to make sure
we support multilingual pages from the get go. Here's the URL for the next step:
'''
Plain = '''
Now that we had completed the hestiaHUGO setup, the next step is to make sure
we support multilingual pages from the get go. Here's the URL for the next step:
'''
Code = '''
'''

[[i18n.Content.URL]]
Value = '/en/getting-started/using-multilingual-pages-from-the-get-go/'
Label = 'Using Multilingual Pages from the Get Go'
