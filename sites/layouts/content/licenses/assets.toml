# PAGE SPECIFIC ASSETS
# ====================
# You can include or inline CSS assets into this specific page only by listing
# out their .URL or relative file .PATH sources respectively.
#
# All .CSS.Inline artifacts shall only be provided with Hugo's virtual pathing
# only.
#
# As For .CSS.Include artifacts, Hestia's URL processing is available for
# dynamic relative pathing constructions. As long as the URL is accessible,
# storing location is not restricted to any single location.
#
# Example, for the artifact placed in:
#          assets storage directory =    assets/
#          artifact location        =    assets/css/my-site.min.css
#          .Inline value            =    assets/css/my-site.min.css
#          .Include value           =    NOT APPLICABLE
#
#          page storage directory   =    en/my-page-here/
#          artifact location        =    en/my-page-here/my-page.min.css
#          .Inline value            =    en/my-page-here/my-page.min.css
#          .Include value           =    /en/my-page-here/my-page.min.css
#
#          static storage directory =    static/css/
#          artifact location        =    static/css/my-page.min.css
#          .Inline value            =    NOT APPLICABLE
#          .Include value           =    /css/my-page.min.css
#
# The data structure pattern is as follows:
#                  [[CSS.Inline]]
#                  Path = '{{ .Inline }}'
#
#                         OR
#
#                  [[CSS.Include]]
#                  URL = '{{ .Include }}'
#                  Media = '{{ .Include.Media }}'
#                  OnLoad = '{{ .Include.OnLoad }}'
#
# To add more entries into either list, simply append new data structure below.
# The position of the entries dictates the rendering sequence of its statement.
#
# For .Include list, should .Media or .Onload is used for asynchonous loading,
# there is no guarentee for the actual CSS loading sequences (see:
# https://web.dev/critical-rendering-path-render-blocking-css/). When in doubt,
# leaving them blank.
#
# NOTE:
# The '__content.hestiaCSS', the page-specific CSS control file will be
# automatically appended into .CSS.Inline as the last item (demmed the most
# powerful among all when operating in .Include leading the .Inline mode). You
# DO NOT need to manually add it in.
[[CSS.Inline]]
Path = ''


[[CSS.Include]]
URL = ''
Media = ''
OnLoad = ''




# You can include or inline JS assets into this specific page only by listing
# out their .URL or relative file .PATH sources respectively.
#
# All .JS.Inline artifacts shall only be provided with Hugo's virtual pathing.
#
# As for .JS.Include artifacts, Hestia's URL processing is available for
# dynamic relative pathing constructions. As long as the URL is accessible,
# storing location is not restricted to any single location.
#
# Example, for the artifact placed in:
#          assets storage directory =    assets/
#          artifact location        =    assets/js/my-site.min.js
#          .Inline value            =    assets/js/my-site.min.js
#          .Include value           =    NOT APPLICABLE
#
#          page storage directory   =    en/my-page-here/
#          artifact location        =    en/my-page-here/my-page.min.js
#          .Inline value            =    en/my-page-here/my-page.min.js
#          .Include value           =    /en/my-page-here/my-page.min.js
#
#          static storage directory =    static/js/
#          artifact location        =    static/js/my-page.min.js
#          .Inline value            =    NOT APPLICABLE
#          .Include value           =    /js/my-page.min.js
#
# The data structure pattern is as follows:
#                  [[JS.Inline]]
#                  Path = '{{ .Inline }}'
#
#                         OR
#
#                  [[JS.Include]]
#                  URL = '{{ .Include }}'
#                  Timing = '...'
#
# To add more entries into either list, simply append new data structure below.
# The position of the entries dictates the rendering sequence of its statement.
#
# For the .Include List, the .Timing value can be any of the following:
#     1. 'defer' - download the asset first and execute after DOM (default).
#     2. 'async' - download the asset in parallel to DOM and execute immediately
#                  regardless of DOM completion status.
#     3. 'sync'  - block DOM and synchonously download and execute the asset.
# When in doubt, stick to 'defer' as you would not want to block the page from
# DOM rendering completion at all time.
#
# NOTE:
# The '__content.hestiaJS', the page-specific JS control file will
# automatically be appended into .JS.Inline as the last item (deemed the most
# powerful among all when operating in .Include leading .Inline mode). You DO
# NOT need to manually add it in.
[[JS.Inline]]
Path = ''


[[JS.Include]]
URL = ''
Timing = 'defer'
