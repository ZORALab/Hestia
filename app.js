const POLICY_CACHE_ONLY="cache-only",POLICY_CACHE_FIRST="cache-first",POLICY_NETWORK_ONLY="network-only";let OFFLINE_CACHE="Hestia-202307211002170700",OFFLINE_RESOURCES={};OFFLINE_RESOURCES["https://hestia.zoralab.com/index.html"]="network-first",OFFLINE_RESOURCES["https://hestia.zoralab.com/index.json"]="network-first",OFFLINE_RESOURCES["https://hestia.zoralab.com/thumbnails-1200x1200.jpg"]="network-first",OFFLINE_RESOURCES["https://hestia.zoralab.com/thumbnails-1200x630.jpg"]="network-first",OFFLINE_RESOURCES["https://hestia.zoralab.com/thumbnails-480x480.jpg"]="network-first";const __putInCache=async(e,t)=>{const n=await caches.open(OFFLINE_CACHE);await n.put(e,t)},_fetchNetworkOnly=async e=>{try{const t=await fetch(e);return __putInCache(e,t.clone()),t}catch{return new Response("Network Error",{status:408,handlers:{"Content-Type":"text-plain"}})}},_fetchCacheOnly=async e=>{const t=await caches.match(e);return t||new Response("Asset Not Found",{status:404,handlers:{"Content-Type":"text-plain"}})},_fetchNetworkFirst=async e=>{try{const t=await fetch(e);return __putInCache(e,t.clone()),t}catch{const t=await caches.match(e);if(t)return t}return new Response("Network Error",{status:408,handlers:{"Content-Type":"text-plain"}})},_fetchCacheFirst=async e=>{const t=await caches.match(e);if(t)return t;try{const t=await fetch(e);return __putInCache(e,t.clone()),t}catch{return new Response("Network Error",{status:408,handlers:{"Content-Type":"text-plain"}})}};self.addEventListener("fetch",e=>{if(e.request.url.indexOf("http")===0)switch(OFFLINE_RESOURCES[e.request.url]){case POLICY_CACHE_FIRST:e.respondWith(_fetchCacheFirst(e.request));break;case POLICY_CACHE_ONLY:e.respondWith(_fetchCacheOnly(e.request));break;case POLICY_NETWORK_ONLY:e.respondWith(_fetchNetworkOnly(e.request));break;default:e.respondWith(_fetchNetworkFirst(e.request));break}}),self.addEventListener("install",e=>{e.waitUntil(async()=>{var e=[];for(let t in OFFLINE_RESOURCES)e.push(t);const t=await caches.open(OFFLINE_CACHE);return t.addAll(e)})}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e===OFFLINE_CACHE)return;return caches.delete(e)}))))})