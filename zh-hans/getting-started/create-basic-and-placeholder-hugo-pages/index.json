{"内容":[{"URL":[],"代码":null,"多元像":{},"大纲":"在成功完毕这个指南领导后，您会学到:\n\n（1）了解hestiaHUGO如何和Hugo一起运作、\n（2）了解hestiaHUGO如何管理文件和URL链接系统、\n（3）了解hestiaHUGO如何处理界面元件设计自由、\n（4）了解hestiaHUGO的设计是如何面对W3C的永久更新、\n（5）了解hestiaHUGO的设计如何面对多元化的输出成果(HTML \u0026 JSON)和\n（6）了解hestiaHUGO在默认情况下如何处理世界多语言。\n","标题":"学习目标","深度":2},{"URL":[{"URL":"https://hestia.zoralab.com/zh-hans/getting-started/setup-hugo/","名字":"设置拥有hestiaHUGO的Hugo"}],"代码":"","多元像":{},"大纲":"这个指南是先决您已经有一份尤其是通过之前的指南设立随时可以运用拥有hestiaHUGO的\nHugo代码库。不然的话，那就请先完整之前的指南才会来这点：\n","标题":"先决条件","深度":2},{"URL":[],"代码":"**模式**\n文件路线 ：          content/[i18n]/url-compatible-pathing/file.extension\nURL地址  ： [http://baseURL]/[i18n]/url-compatible-pathing/file.extension?query=value#tags\n\n**例子**\ncontent/ (https://hestia.zoralab.com/)\n\t重定向去 ➔ content/en (https://hestia.zoralab.com/en)\n\t重定向去 ➔ content/zh-hans (https://hestia.zoralab.com/zh-hans/)\n\ncontent/releases (https://hestia.zoralab.com/releases)\n\t重定向去 ➔ content/en/releases/ (https://hestia.zoralab.com/en/releases/)\n\t重定向去 ➔ content/zh-hans/releases/ (https://hestia.zoralab.com/zh-hans/releases/)\n\ncontent/zh-hans/releases/v1-0-0/ (https://hestia.zoralab.com/zh-hans/releases/v1-0-0/)\ncontent/zh-hans/releases/v1-1-0/ (https://hestia.zoralab.com/zh-hans/releases/v1-1-0/)\ncontent/zh-hans/releases/v1-2-0/ (https://hestia.zoralab.com/zh-hans/releases/v1-2-0/)\ncontent/zh-hans/releases/v1-2-0/index.html (https://hestia.zoralab.com/zh-hans/releases/v1-2-0/)\ncontent/zh-hans/releases/v1-2-0/index.json (https://hestia.zoralab.com/zh-hans/releases/v1-2-0/index.json)\ncontent/zh-hans/releases/v1-2-0/my-file.zip (https://hestia.zoralab.com/zh-hans/releases/v1-2-0/my-file.zip)\n","多元像":{},"大纲":"hestiaHUGO原生是有支持它自己的多语言(‘i18n’）功能：\n××它是运用第一层的文件夹为**ISO639-1、ISO639-2、ISO639-3、ISO15924和ISO3166语言代码××\n或无语言关系的网页（如：URL地址重向网页）。其余的是和Hugo一样。\n我们非常建议您为那文件夹设名时一定要遵守URL地址的模式和规则（如：没有空格、\n一切是小字母和没有古怪的符号等等）。\n即使您是建设语言单一的网站都好，\n您也为了未来不想垄断网页的链接点得遵守这个名字模式。\n","标题":"了解hestiahugo如何处理URL地址和文件系统","深度":2},{"URL":[],"代码":"# LINUX / MACOS\n\t[ CTRL+C 停止Hugo Server ]\n\t$ cd sites/        # 如果您不在您的Hugo文件夹里\n\t$ mkdir -p content\n\t$ hugo server .... # 如果忘记，请复习之前的指南\n\n\n# WINDOWS\n\t[ CTRL+C 停止Hugo Server ]\n\t\u003e cd sites/        # 如果您不在您的Hugo文件夹里\n\t\u003e mkdir content\n\t\u003e hugo server .... # 如果忘记，请复习之前的指南\n","多元像":{},"大纲":"我们先开始制造Hugo需要的Content文件夹吧。它的名字其实在您的\n‘config/_default/config.toml’文件里的‘contentDir’数码价值(常名为‘content’）。\n您可以改成别的名字。在这个指南里，我们还是运用常名‘content’来制造。过后呢，您需\n要重新启动您的Hugo Server(提示：`hugo server...`命令）。全部命令菜单如下：\n","标题":"制造Hugo的Content文件夹","深度":2},{"URL":[],"代码":"**模式**\n$ hugo new --kind hestia [filesystem path]\n\n\n**例子**\n$ hugo new --kind hestia content/zh-hans\n","多元像":{},"大纲":"现在系统需要的文件夹已经有了，我们可以开始为’/zh-hans‘登陆网页建设成占位符性\n网页。我们暂时是不会建设这一页。不过呢，’/zh-hans/404‘网页是需要它的出现才能开始\n建设。hestiaHUGO原生是和Hugo系统综合的。既然这个指南的语言是国际华语，那我们就通\n过Hugo命令来建出’content/zh-hans‘的网页吧。切记：这个命令是又重要和又常用的。您最\n好把它给记得起来。命令模式如下：\n","标题":"建设占位符性的网页","深度":2},{"URL":[],"代码":"__assets.toml            ➤ 处理所有要在编制中加入CSS和JS代码库文件\n__components.toml        ➤ 例出所有在编制这页运里需要的hestiaHUGO界面模块\n__content.hestiaCSS      ➤ 这网页有关和将会被内嵌进HTML输出成果的最后一份CSS文件\n__content.hestiaHTML     ➤ 这网页输出的HTML内容模型\n__content.hestiaJS       ➤ 这网页有关和将会被内嵌进HTML输出成果的最后一份JS文件\n__content.hestiaJSON     ➤ 这网页输出的JSON内容模型\n__content.hestiaLDJSON   ➤ 这网页有关和将会被内嵌进HTML输出成果的LD+JSON文件\n__contributors.toml      ➤ 例出所有在这网页有关的贡献者\n__data.toml              ➤ 一份网页层的数据文件\n__i18n.toml              ➤ 一份网页层的数据文件\n_index.html              ➤ hugo网页察觉文件 (**绝对不可碰**)\n__languages.toml         ➤ 这网页的其他语言(翻译）网页链接菜单\n__page.toml              ➤ 这网页的主要第一设置文件\n__robots.toml            ➤ 这网页有关和将会被内嵌进HTML输出成果的擦寻机械器指南\n__thumbnails.toml        ➤ 这网页的是在社交网络运用的展览缩略图\n__twitter.toml           ➤ 这网页的推特设置\n__wasm.toml              ➤ 这网页的WASM设置\n","多元像":{},"大纲":"在还未继续建设时，我们先了解hestiahugo如何处理网页的设置。如果您现在观光那\n’content/zh-hans/‘文件夹里，您会找到很多TOML设置文件。由于现代的互联网的构造已经\n变得非常复杂，我们也无可奈何只能把那么多的设置分成因该的设置文件。有一个固定的思\n维一定要记住：千万不可碰Hugo原本的**_index.html**文件。它现在只是让Hugo寻找您的\n网页地图而已。我们的hestiaHUGO设计是很少会和其他Hugo界面的模块有冲突的而且您还是\n可以继续在同一个文件夹里放入网页有关而已的文件（如：有关图画只有这个网页运用、\n.docx文件、.csv文件，.pdf文集等等）。每个设置TOML文件如：\n","标题":"了解hestiahugo如何处理网页的设置","深度":2},{"URL":[],"代码":"...\n\n[Date]\nCreated   = 'Sat, 05 Mar 2023 11:22:21 +0800'  # 记得更新到今天时间\nPublished = 'Sat, 05 Mar 2023 11:22:21 +0800'  # 记得更新到今天时间\n\n...\n\n[Content]\nTitle = '我的APP'\nKeywords = [\n        '我的APP',\n]\n\n...\n\n[Description]\nPitch = '''\n待确认中。\n'''\nSummary = '''\n待会儿在回来。\n'''\n\n...\n","多元像":{},"大纲":"别担心，要处理占位符性的网页只需更新__page.toml设置文件就行了。这份文件是网页的\n最重要的设置数据。一些您需要更新的数据有如：\n","标题":"更新__page.toml","深度":2},{"URL":[{"URL":"https://git-scm.com/book/zh/v2","名字":"Git手册书"}],"代码":"$ git add .\n$ git commit -s\n\n--- 在您的文本编辑器里更改 ---\nsites: 加入/zh-hans/占位符性的网页\n\n为了我们想建设的/zh-hans/404网页，我们还是先建设需要的/zh-hans/占位符性\n的网页。如此，我们就开工吧。\n\n这个补丁是在sites/文件夹里加入/zh-hans/占位符性的网页。\n\n\nSigned-off-by: Name \u003cEMAIL\u003e\n--- 在您的文本编辑器里更改 ---\n\n$ git push\n","多元像":{},"大纲":"现在全部东西已经设好了，您可以为这占位符性的网页的网页Git Commit掉然后往我们想要\n的/zh-hans/404网页建设。如果您需要Git的帮助，您可以通过以下的URL链接了解他们的官\n方书。大致上的命令列单是：\n","标题":"Git Commit占位符性的网页","深度":2},{"URL":[],"代码":"提示：\n(1) $ hugo new --kind hestia [filesystem path]\n(2) $ 为404网页的__page.toml更新它需要和合适的数据。\n(3) $ git add .\n","多元像":{},"大纲":"现在轮到您表演啦。我们要建设简单的/zh-hans/404网页\n（提示：'content/zh-hans/404'）。请运用您之前所学的技巧先假设需要的网页设置但是\n不需要Git Commit就行了。我们要接下来开发它。\n","标题":"为404网页建设重复所学的技巧","深度":2},{"URL":[],"代码":"...\n\n[Creator]\nHandle = 'yourTwitterHandle'    # 有没有@都可以\n\n...\n","多元像":{},"大纲":"和之前占位符性的网页不同的是这一轮我们要彻底建设网页了。首先，如果您有推特的用户\n您可先更新'content/zh-hans/404/__twitter.toml'的这篇网页有关的设置。由于这是个\n404网页（因该没有人特地去询问吧），您只需要更新以下的数据就行了：\n","标题":"更新网页推特的设置","深度":2},{"URL":[],"代码":"...\n\n[[Meta]]\nName = 'googleBot'\nContent = 'noindex, nofollow'\n\n[[Meta]]\nName = 'robots'\nContent = 'noindex, nofollow'\n","多元像":{},"大纲":"由于这页是个404网页，我们是不要网络擦寻机械器给放入大众的擦寻菜单里。如此以来，\n我们需要更新那'content/zh-hans/404/__robots.toml'设置文件了。这些网络擦寻机械器\n的指南数据将会被内嵌进HTML的meta标签里。例子有如：\n","标题":"更新擦寻机械器指南设置","深度":2},{"URL":[],"代码":"...\n\n[zh-hans]\nURL = '/zh-hans/404'\n","多元像":{},"大纲":"为了避免在以后制造太多复制粘贴的错误，我们还是最好更新\n'content/zh-hans/404/__languages.toml'语言设置。\n我们非常建议您运用\u003ccode\u003eRFC3986\u003c/code\u003e符合的URL链接相对型网址。\n我们会在下一步好好解释让您了解更多。以下是需要的更新工作：\n","标题":"更新网页的语言设置","深度":2},{"URL":[{"URL":"https://www.rfc-editor.org/rfc/rfc3986","名字":"RFC3986 URL规范"}],"代码":"例子1 - 输入无关的绝对型网址\n基地地址 : https://hestia.zoralab.com/default-path\n现任网页 : https://hestia.zoralab.com/default-path/this-page/\n输入     : https://www.example.com/\n输出     : https://www.example.com/\n\n\n例子2 - 输入与基地地址有关的相对型网址\n基地地址 : https://hestia.zoralab.com/default-path/\n现任网页 : https://hestia.zoralab.com/default-path/this-page/\n输入     : /my-page\n输出     : https://hestia.zoralab.com/default-path/my-page\n\n\n例子3 - 输入与现任网页的对型网址（注意：地址没有带头的斜线'/'）\n基地地址 : https://hestia.zoralab.com/default-path/\n现任网页 : https://hestia.zoralab.com/default-path/this-page/\n输入     : my-page\n输出     : https://hestia.zoralab.com/default-path/this-page/my-page\n","多元像":{},"大纲":"hestiaHUGO运用它自己的URL数据处理器（名为'hestiaURL/Sanitize'功能）。我们非常建\n议您在编译之前的范围运用相对型网址（如：您的网页模板等等）然后让hestiaHUGO把它\n编译成绝对型网址。您的网络游客不管任何原因永远都一定要得到绝对型网址。这个功能\n是RFC3986符合的。所以呢，您在建设相对型网址要小心啦。以下的例子可以详细描述它们\n的不同点：\n","标题":"了解hestiahugo如何处理URL","深度":2},{"URL":[],"代码":"...\n\n{{- /* render outputs */ -}}\n\u003cmain\u003e\n\t\u003csection id='自介' class='banner'\u003e\n\t\t\u003ch1\u003e{{- .Titles.Page -}}\u003c/h1\u003e\n\t\t\u003cp\u003e{{- .Descriptions.Page.Pitch }} {{ .Descriptions.Page.Summary -}}\u003c/p\u003e\n\n\n\t\t{{- $ret := merge . (dict \"Input\" (dict \"Data\" \"/en/\")) -}}\n\t\t{{- $ret = partial \"hestiaURL/Sanitize\" $ret -}}\n\t\t\u003ca class='button' href='{{- $ret -}}'\u003e回去主页\u003c/a\u003e\n\t\u003c/section\u003e\n\u003c/main\u003e\n","多元像":{},"大纲":"给予hestiaHUGO,那份HTML内容模型文件其实是在__page.toml设置文件里的'Sources.HTML'\n所设的数据。原型数据其实是在同一个文件夹的'__content.hestiaHTML'文件。在这个指南\n里，如今我们是初学者，那我们就用那原型'__content.hestiaHTML'文件吧。咱们就打开来\n研究一下。如果您是已经上轨的Hugo模型开发者，您会马上发现到我们是运用Go的模型呈现\n功能（包括Hugo的partial功能）而不再是Markdown格式和Hugo的shortcode系统。在运用任\n何ZORALab赫斯提亚的产品时，我们是会要把它们开发成统一和越通用越好的。如果您已经\n是Go的开发者，您的Go Template智慧和经验自动和完整无亏损地在这个重用。在这个指南\n里，我们把文件给更新成一下的代码吧。当您完成任务后，让那Hugo服务器处理之后，您可\n以询问那服务器给的地址+/zh-hans/404/网页检验内容的准确。\n","标题":"开发网页的HTML内容模型","深度":2},{"URL":[],"代码":"","多元像":{},"大纲":"不像Hugo需要让网页设计师去猜测数据价值，hestiaHUGO处理和运用自己的网页数据结构好\n让设计师容易运用。更好的是，我们还有网页内可设计自适应的调试器控制台让您检验任何\n有关可用的数据。有注意到荧幕右边底下有个非常彩色的按钮吗？按按看就可以看到调试器\n控制台了。例如呢，您有注意到'{{- .Titles.Page -}}'被呈现成它的数据'.Titles.Page'\n价值了？\n","标题":"了解hestiaHUGO如何处理网页数据","深度":2},{"URL":[{"URL":"https://hestia.zoralab.com/zh-hans/specs/hestiacompilers/hestiahugo/","名字":"hestiaHUGO.Page数据架构规范"}],"代码":"__data.toml + __i18n.toml + ...   (切记: 跟着__page.toml的[[Data]]数组菜单)\n             ⤋\n         .Field.[...]\n             ⤋\n     {{- .Field.[...] -}}\n","多元像":{},"大纲":"hestiaHUGO终于完成设计它对content文件夹的控制和设计好让每一个文件夹输入有关网\n页需要的数码资料。还记得__i18n.toml和__data.toml文件吗？这些数码文件有在\n__page.toml的[[Data]]数组菜单里。hestiaHUGO维持足够的自由来建设网页的数据架\n构。当它完成解析所有的数据文件后，您的数据可以通过hestiaHUGO.Page数据架构来建设\n您的网页。其他的设置文件当然也是会供应不同的数据。请随心通过调试器控制台玩玩研究\n吧。以下的链接是hestiaHUGO.Page数据架构的规范（的空时才阅读吧，我们先向前走）。\n","标题":"了解hestiahugo的数据路径","深度":2},{"URL":[{"URL":"https://hestia.zoralab.com/zh-hans/specs/","名字":"规范"}],"代码":"","多元像":{},"大纲":"hestiaHUGO如其他ZORALab赫斯提亚模块供应自己的标准代码库。刚才有注意到您运用\nhestiaURL.Sanitize吗？那是hestiaHUGO的URL数据检验功能。它把URL链接从相像型去\n稳定的绝对型。能供应自己的标准代码库主要是我们可以继续专心发展ZORALab赫斯提亚尤\n其是所有模块通用而不是整天只是忙着寻擦Hugo不稳定的输出成果根源。所有\nZORALab赫斯提亚元件都是经过同样的上下文写出的。以下的链接是ZORALab赫斯提亚全部的\nAPI规范官方文件。为了这份指南，我们会向前走。待会阅读吧。\n","标题":"了解hestiaHUGO如何授权Hugo","深度":2},{"URL":[],"代码":"...\n[[List]]\nName = \"zoralabCORE\"\nInclude = true\nVariables = [\n        { \"--body-scroll-behavior\" = \"smooth\" },\n]\n\n[[List]]\nName = \"zoralabFONT_NOTOSANS\"\nInclude = true\nVariables = []\n\n[[List]]\nName = \"zoralabANCHOR\"\nInclude = true\nVariables = []\n\n[[List]]\nName = \"zoralabBUTTON\"\nInclude = true\nVariables = []\n","多元像":{},"大纲":"现在我们已经肯定了呈现HTML而已的网页数据，我们可以开始开发它的造型了。hestiaHUGO\n运用界面元件方式去把网页稳重地造型出来。请更新/zh-hans/404/__components.toml的设\n置数据如以下显示的资料。但您做好了后，就让Hugo服务器内部更新一下才再次刷新观看那\n404网页。您会注意到那网页已经美化好（尤其是那按钮）。您可以通过调试器控制台寻找\n.CSS.Inline的编这页制出的CSS代码。\n","标题":"开发网页的界面造型元件菜单","深度":2},{"URL":[{"URL":"https://hestia.zoralab.com/zh-hans/specs/hestiagui/","名字":"界面造型元件规范菜单"}],"代码":"","多元像":{},"大纲":"hestiaHUGO是像Backbone、Angular和React结构把页造型元件化但与它们不同的是\nhestiaHUGO把每个元件的HTML、CSS、和JS综合起来而不是分开偏向JS单一处理。如此一来，\n通过Hugo，hestiaHUGO可以编制网页只需要的CSS、CSS变化值和JS的代码然后内嵌进它的\nHTML代码里。那编制出的HTML文件是AMP最初设想自给自足而不再需要而外远程架构的网页\n啦。另外呢，这个编制出的HTML文件可以很容易地支持PWA离线情况下继续运用而且还让造\n型元件设计师专住和容易化元件更新W3C的不向后兼容的进展工作。3件事1次性搞定⥤价廉\n物美啊。\n","标题":"了解hestiaHUGO如何处理网页造型","深度":2},{"URL":[],"代码":"","多元像":{},"大纲":"主要是要避免在更新UI时在全站里搞出打鼹鼠游戏类似的网页造型破裂。我们已经实验过很\n多种方式了。如今，这个方式是最优化了。若要好像以前一样地在全站里规模化，您只需\n复制那__components.toml就行了。这样做也可以让初学设计师可以安全地地去制作网站同时\n放心地搞错误来学习和进展。\n","标题":"了解hestiaHUGO为何集装每个网页的造型","深度":2},{"URL":[],"代码":"...\n\n[[List]]\nName = \"zoralabCORE\"\nInclude = true\nVariables = [\n        { \"--body-scroll-behavior\" = \"smooth\" },   # 这个改写原本的none价值\n]\n\n...\n","多元像":{},"大纲":"如同之前所说的：CSS代码是用来造型界面、CSS变化值是用来随环境更改界面定制和JS代码\n用来造型动画和反映设计等等用途。当您加入一份界面元件时，您会有一个Include的开关\n在设计中用来容易寻找问题根点（好过把一大堆的代码给删掉）。您也同时可以同时改写\n界面元件CSS变化值现有的价值，好让hestiaHUGO只需编制一份CSS变化值菜单就足够了。\n","标题":"了解hestiaHUGO如何操作界面元件","深度":2},{"URL":[],"代码":"","多元像":{},"大纲":"为了2个重要的原因：(1)支持隐私优先的呈现（如：完全禁用JS）➤ 在2022新冠疫情时期，\n每个人对隐私数据泄漏非常敏感所以完全禁用JS的用法是迟早的。在这种情况里，您的出名\nJS构架和我们的WASM是完全没用但是游客还是要网站可以依然使用。(2)ZORALab赫斯提亚有\n目的把JS给一些正常点的代码语言如Go或Nim通过WASM完全代替。如果只是HTML和CSS而已，\n那界面元件WASM进化工作会非常容易「不需要烦JS的控制骚扰」。无论如何，您还是可以运\n用Javascript（我们会迟点教您）。在ZORALab赫斯提亚行政里，我们绝不像某些科技那么\n狠心霸道来控制任何人的艺术自由发挥和表现。\n","标题":"了解ZORALab赫斯提亚为何只专注HTML和CSS造型而已","深度":2},{"URL":[],"代码":"","多元像":{},"大纲":"咱们面对现实吧：JavaScript虽然在历史至今还是不稳定和唯一可以在网络运用的代码语\n言。它的不定弱点搞出一些架构如Angular和Typescript等等来变通地“解决”问题。由于它\n们本身也是来自Javascript出生，就这样制造了它们本身的问题。如今WASM的诞生，\nZORALab坚决地要迎面地解决这JavaScript的问题啦。我们不是讨厌JavaScript而是发现它\n还蛮高风险的。很久以前的JavaScript架构出生和淘汰就足够证明一切了。\n","标题":"了解zoralab和JavaScript关系","深度":2},{"URL":[],"代码":"","多元像":{},"大纲":"如今想要达到我们的网络科技梦想，那就有3个使用案例必须实现：（1）可被SEO和SMO发现\n的网页、（2）单一APP - 1个WASM操作整个网站和（3）反应式渲染网页 - 每个网页都有\n自己的WASM渲染网页内容。hestiaHUGO将会满足使用案例（1）和供应WASM给使用案例（2）\n和使用案例（3）。这也就是为何我们还在支持Hugo（还把它改成内容编译器）。\n","标题":"了解hestiaHUGO的未来","深度":2},{"URL":[],"代码":"main {\n\theight: 100vh;\n\twidth: 100vw;\n\n\t isplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tbackground: linear-gradient(245deg,\n\t\t\t\t\t#192fe3,\n\t\t\t\t\t#19e33b,\n\t\t\t\t\t#bbe319,\n\t\t\t\t\t#e35019,\n\t\t\t\t\t#e31919,\n\t\t\t\t\t#e319c1);\n\tbackground-size: 1200% 1200%;\n\n\tanimation: BgDiscoFlasher 4s ease infinite;\n}\n\n@keyframes BgDiscoFlasher {\n\t0%{background-position:0% 86%}\n\t50%{background-position:100% 15%}\n\t100%{background-position:0% 86%}\n}\n\n.banner {\n\twidth: 50%;\n\tmax-height: fit-content;\n\n\tpadding: 5rem;\n\tborder-radius: 2rem;\n\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n\n\tbackground: rgba(255, 255, 255, .75);\n}\n","多元像":{},"大纲":"现在那404网站已经规模化地美化了，您可以通过CSS再更改进化那网页到它独特的造型。您\n只需要在__content.hestiaCSS加入您的CSS代码就行了。hestiaHUGO会把它编译为最后一份\n内嵌的CSS文件。当Hugo服务器做好了，您可以回去那网页看看。它因该是在以颜色跳舞吧。\n","标题":"通过CSS再更改进化网页造型","深度":2},{"URL":[],"代码":"window.onload = function() {\n\tconsole.log(\"\\nMeow~~~~ ₍⌯ᴖⱅᴖ⌯ ^₎◞ ̑̑ෆ⃛ \\n\\n\");\n};\n","多元像":{},"大纲":"同时，您也可以通过JavaScript更新进化网页造型。那文件是__content.hestiaJS。虽然那\n404网页已经不需要在进化造型了，为了完整化这份指南，我们就加入以下的JS代码经历一\n下吧。当Hugo处理器搞定好了，您可以再次观赏那404网页然后打开浏览器的检查器控制台\n（F12键盘键)。您应该会看到一只喵喵的猫咪。就如CSS一样：这份JS也是编译为最后一份\n内嵌的JS文件。\n","标题":"通过JavaScript更新进化网页","深度":2},{"URL":[{"URL":"https://validator.schema.org/","名字":"LD+JSON验证室"}],"代码":"...\n{{- /* prepare variables for function */ -}}\n...\n\n\n\n{{- /* execute function */ -}}\n{{- $dataList = merge $dataList (partial \"hestiaJSON/schemaorgLDJSON/WebPage\" .) -}}\n\n\n\n\n{{- /* render output */ -}}\n...\n","多元像":{},"大纲":"hestiHUGO有内置支持Schema.org的网页数码构架。那有关文件是__content.hestiaLDJSON。\n如今是404网页，我们只需要加入以下的代码程序就行了。当Hugo服务器完成它的更新程序之\n后，您可以在网页内通过我们的调试器控制台索取输出的成果然后送去Schema.org的验证室\n检验一下。\n","标题":"为SEO更新LD+JSON数据","深度":2},{"URL":[{"URL":"https://schema.org/docs/full.html","名字":"Schema.org Data Structures"}],"代码":"","多元像":{},"大纲":"为了在自由发挥和稳重输出内保持平衡，两件要记得的是：（1）hesitaHUGO只能帮您快速\n地建设先知常用的数据构架（如作者、页类、等等）。（2）您需要自己另加网页有关的仔\n细数据（如：煮法步骤等等类型）。\n","标题":"了解hestiaHUGO如何处理LD+JSON","深度":2},{"URL":[],"代码":"提示：\n$ git add .\n","多元像":{},"大纲":"现在HTML的输出成果已经做好了，我们就应该Git暂存目前的状态。我们的目前工作还未做\n完。请继续下一步吧。\n","标题":"暂存当前的状态","深度":2},{"URL":[],"代码":"","多元像":{},"大纲":"hestiaHUGO在默认情况下支持JSON为同时第二输出内容。这是hestiaHUGO的功能，而不是运\n用Hugo的。有如之前的LD+JSON相似，您可以在这儿建设网页的数据架构。但是和LD+JSON不\n同的是，您是不会被Schema.org的数据架构规范给横行锁住。这是纯真JSON（可以在URL地\n址加上index.json就可以看到）。那文件是在__page.toml里被.Sources.JSON规定的（常用\n的是__content.hestiaJSON）。既然我们现在是建设404网页，我们可以放着就好。您可以\n去看看那文件来了解更多。\n","标题":"制造JSON的输出内容","深度":2},{"URL":[],"代码":"","多元像":{},"大纲":"5个原因：（1）可以运用hestiaHUGO制作CDN推动的开源数据API的服务网站、（2）一个在\n网络搜寻服务工商接近为了广告收入破坏SEO的情况下备份原因来运用Hugo、（3）供应一个\n没有被LD+JSON锁控的数据输出、（4）确定和测试hestiaHUGO可以输出多个一种内容和（5）\n准备一个方法为AI输入数据。在默认情况下的设置是为没有需求而定。如果您不需要运用\nJSON输出内容，您可以完全不碰那__content.hestiaJSON文件。\n","标题":"了解hestiaHUGO为何默认情况支持JSON输出内容","深度":2},{"URL":[],"代码":"提示：\n$ git add .\n$ git commit -s\n----\n... 如之前所教的写出一个好Git论文 ...\n----\n$ git push\n","多元像":{},"大纲":"在这检查站，我们已经完整地把一个简单和基本的404网页做好了。您可以Git提交和推送\n了。\n","标题":"提交和推送","深度":2},{"URL":[],"代码":"","多元像":{},"大纲":"如果您还未发现，hestiaHUGO只需要输入1分网页数据来输出多种内容格式和可以稳重地同\n时支持多种语言。其实，它还私低下为每份网页输出sitemap.xml和sitemap-page.xml的文\n件。这也就是我们一路想解决的Hugo问题：1个稳重的输入数据安稳地输出多种内容格式。\n我们目前所学的只是一小部分而已。在以后的指南里，我们会继续研究更多hestiaHUGO的功\n能。\n","标题":"记得hestiaHUGO的强点","深度":2},{"URL":[{"URL":"https://hestia.zoralab.com/zh-hans/getting-started/using-multilingual-pages-from-the-get-go/","名字":"从一开始就运用多语言系统"}],"代码":"","多元像":{},"大纲":"现在您明白如何制作简单的网页了，下一步是如何从一开始就支持多语言系统。\n以下是下一步的URL链接：\n","标题":"下一步？","深度":2}],"大纲":"通过建设简单的网页，我们学习hestiaHUGO如何运行。 一个一步一步编好的ZORALab赫斯提亚Hugo从新设置指南。","标题":"建设简单和占位符性的Hugo网页"}