{"Content":[{"Code":"","Description":"At the end of this tutorial, you will learn:\n(1) How hestiaHUGO works with Hugo; AND\n(2) How hestiaHUGO governs filesystem pathing and URL; AND\n(3) How hestiaHUGO manage all designers' creating freedom via UI components; AND\n(4) How hestiaHUGO design to counter the ever-changing W3C changes; AND\n(5) How hestiaHUGO design its multiple outputs (HTML \u0026 JSON); AND\n(6) How hestiaHUGO handles internationalization by default.\n","Level":2,"Media":{},"Title":"Learning Objectives","URL":[]},{"Code":"","Description":"This tutorial assumes you have a fresh hestiaHUGO equipped Hugo repository ready\nfor deployment especially being created from the previous setup tutorial page.\nOtherwise, please complete that lesson and then revert back to this piece:\n","Level":2,"Media":{},"Title":"Prerequisite","URL":[{"Label":"Setup Hugo Tutorial","URL":"https://hestia.zoralab.com/en/getting-started/setup-hugo/"}]},{"Code":"PATTERN\nFile path :          content/[i18n]/url-compatible-pathing/file.extension\nURL       : [http://baseURL]/[i18n]/url-compatible-pathing/file.extension?query=value#tags\n\nEXAMPLES\ncontent/ (https://hestia.zoralab.com/)\n\tredirects ➔ content/en (https://hestia.zoralab.com/en)\n\tredirects ➔ content/zh-hans (https://hestia.zoralab.com/zh-hans/)\n\ncontent/releases (https://hestia.zoralab.com/releases)\n\tredirects ➔ content/en/releases/ (https://hestia.zoralab.com/en/releases/)\n\tredirects ➔ content/zh-hans/releases/ (https://hestia.zoralab.com/zh-hans/releases/)\n\ncontent/en/releases/v1-0-0/ (https://hestia.zoralab.com/en/releases/v1-0-0/)\ncontent/en/releases/v1-1-0/ (https://hestia.zoralab.com/en/releases/v1-1-0/)\ncontent/en/releases/v1-2-0/ (https://hestia.zoralab.com/en/releases/v1-2-0/)\ncontent/en/releases/v1-2-0/index.html (https://hestia.zoralab.com/en/releases/v1-2-0/)\ncontent/en/releases/v1-2-0/index.json (https://hestia.zoralab.com/en/releases/v1-2-0/index.json)\ncontent/en/releases/v1-2-0/my-file.zip (https://hestia.zoralab.com/en/releases/v1-2-0/my-file.zip)\n","Description":"hestiaHUGO natively supports its own multi-languages (a.k.a. 'i18n') feature by\ndefault. IT USES DIRECTORY NAME AS URL PATH and the 1st level is\n**ISO639-1, ISO639-2, ISO639-3, ISO15924, and ISO3166 LANGUAGE CODE** or\nlanguage independent pages (e.g. usually redirecting shortcuts). The rest are\nthe same as Hugo. We advise you to name your directory according to the URL\npattern (no space, small characters, and no funny symbols) and use it eventhough\nthe content is a single language to avoid building broken URL site in the\nfuture.\n","Level":2,"Media":{},"Title":"Understand How hestiaHUGO Manage URL with Filesystem","URL":[]},{"Code":"# LINUX / MACOS\n\t[ Kill the server with CTRL+C ]\n\t$ cd sites/        # your hugo repository if you're not inside it\n\t$ mkdir -p content\n\t$ ./server.cmd     # refer pervious tutorial if you had forgotten\n\n\n# WINDOWS\n\t[ Kill the server with CTRL+C ]\n\t\u003e cd sites/        # your hugo repository if you're not inside it\n\t\u003e mkdir content\n\t\u003e server.cmd       # refer pervious tutorial if you had forgotten\n","Description":"We can now start by creating the Hugo's content directory. It is named inside\nyour 'config/_default/config.toml' under the field 'contentDir' (usually called\n'content'). You may alter it as per your need. For this tutorial, we will just\nstick to the default 'content'. After creating the directory, you will need to\nrestart your hugo server (hint: `server.cmd` command). A complete list of\ncommands would be:\n","Level":2,"Media":{},"Title":"Create Hugo's Content Directory","URL":[]},{"Code":"PATTERN\n$ hugo new --kind hestia [filesystem path]\n\n\nCOMMAND\n$ hugo new --kind hestia content/en\n","Description":"We will begin by creating a single language placeholder landing page. We won't\nbe building this page now but we need it for the page we want to build: the 404\npage. hestiaHUGO is designed in the way to be natively compatible with Hugo.\nSince this is an English language tutorial, we can proceed to create\n'content/en' page with hugo command. Remember this important step because we\nwon't repeat it again and you will be using it a lot. The command is as shown\nbelow:\n","Level":2,"Media":{},"Title":"Create Placeholder Page","URL":[]},{"Code":"__assets.toml            ➤ manage all CSS and JS files' inclusion or compilation\n__components.toml        ➤ list out all hestiaHUGO UI components for compilation\n__content.hestiaCSS      ➤ the page's final CSS asset for inlining into HTML\n__content.hestiaHTML     ➤ the page's HTML output\n__content.hestiaJS       ➤ the page's final JS asset for inlining into HTML\n__content.hestiaJSON     ➤ the page's JSON output\n__content.hestiaLDJSON   ➤ the page's LD+JSON output for inlining into HTML\n__contributors.toml      ➤ designate list of contributors to this page\n__data.toml              ➤ a page-level data file listed in __page.toml\n__i18n.toml              ➤ a page-level data file listed in __page.toml\n_index.html              ➤ hugo discovery file (**DO NOT TOUCH THIS AT ALL**)\n__languages.toml         ➤ the page's alternate languages URL (translated pages)\n__page.toml              ➤ the page's primary configurations\n__robots.toml            ➤ the page's robots instructions for inlining into HTML\n__thumbnails.toml        ➤ the page's thumbnails used in social media sharing\n__twitter.toml           ➤ the page's Twitter configuration for sharing\n__wasm.toml              ➤ the page's WASM configurations\n","Description":"Before we continue, let's understand how hestiaHUGO manage page compilations.\nIf you take a look at the `content/en` page, there are a lot of double\nunderscore TOML files. Due to the complexities of web connectivities across the\nInternet, we do not have a choice but to split them into various pieces of\nconfig data. One constant to remember: never touch the Hugo's original\n**_index.html** file. It is now ONLY USE for hugo to discover and map the site\ndirectories. The way hestiaHUGO is designed will rarely have any conflict with\nother Hugo themes. You're still allowed to place any page associated files\n(e.g. images only this page uses, docs, .csv, etc) in the same directory. Each\nknown files' roles and responsibilities are listed below:\n","Level":2,"Media":{},"Title":"Understand How hestiaHUGO Manages Page Configurations","URL":[]},{"Code":"...\n\n[Date]\nCreated   = 'Sat, 05 Mar 2023 11:22:21 +0800'  # update to today's time obviously\nPublished = 'Sat, 05 Mar 2023 11:22:21 +0800'  # update to today's time obviously\n\n...\n\n[Content]\nTitle = 'My App Page'\nKeywords = [\n        'My App Page',\n]\n\n...\n\n[Description]\nPitch = '''\nTBD.\n'''\nSummary = '''\nWill be back later.\n'''\n\n...\n","Description":"Don't worry, for placeholding page, you only need to deal __page.toml file.\nThis is to setup the page's critical metadata. A few critical fields you have\nto update are shown below:\n","Level":2,"Media":{},"Title":"Update the __page.toml","URL":[]},{"Code":"$ git add .\n$ git commit -s\n\n--- EDIT IN YOUR EDITOR ---\nsites: added /en/ page as placeholder\n\nSince we need to build /en/404/ page, we have to create the /en/ page as\nplaceholder for now. Hence, let's do this.\n\nThis patch adds /en/ page as placeholder in sites/ directory.\n\n\nSigned-off-by: Name \u003cEMAIL\u003e\n--- EDIT IN YOUR EDITOR ---\n\n$ git push\n","Description":"Now that everything is in place, you can proceed to git commit the page and we\nwill proceed to deal with the real basic one: '/en/404 page'. If you need\nassistance with Git, you can check out their offical book in the following URL.\nBasically, the command is as follows:\n","Level":2,"Media":{},"Title":"Git Commit Placeholder Page","URL":[{"Label":"Git Manual","URL":"https://git-scm.com/book/en/v2"}]},{"Code":"HINT\n(1) $ hugo new --kind hestia [filesystem path]\n(2) $ update __page.toml with the appropriate values for 404 page\n(3) $ git add .\n","Description":"Now that you get the hang of how to create a hestiaHUGO page and updating the\ncritical file, as a re-cap, please create /en/404 page (hint: 'content/en/404'\npath). For this page, please DO NOT commit as we will begin this page creation\nin the next step.\n","Level":2,"Media":{},"Title":"Repeat Page Creation for 404 Page","URL":[]},{"Code":"...\n\n[Creator]\nHandle = 'yourTwitterHandle'    # with or without @ is ok\n\n...\n","Description":"Unlike placeholder page, this time, if you have Twitter account, you can update\nthe 'content/en/404/__twitter.toml' config file. Since 404 page is just a system\nnotice page (and no one insane enough to visit it on purpose), you only need to\nupdate the following:\n","Level":2,"Media":{},"Title":"Update Page-level Twitter Settings","URL":[]},{"Code":"...\n\n[[Meta]]\nName = 'googleBot'\nContent = 'noindex, nofollow'\n\n[[Meta]]\nName = 'robots'\nContent = 'noindex, nofollow'\n","Description":"Due to this page being a 404 page, we do not want any search engine robots to\nindex it. Hence, let's update the 'content/en/404/__robots.toml' config file.\nThese robot values will be compiled as the page's HTML output's meta tags. An\nexample would be as follows:\n","Level":2,"Media":{},"Title":"Update Page-level Robots Settings","URL":[]},{"Code":"...\n\n[en]\nURL = '/en/404'\n\n...\n","Description":"As a good practice and to prevent massive copy-paste error in the future, it is\nbetter we update the page-specific language settings in the\n'content/en/404/__languages.toml' config file. You're strongly advised to use\nRFC3986 compliant relative URL. We will explain further in the next step.\nHere's the data to be updated:\n","Level":2,"Media":{},"Title":"Update Page-level Languages Settings","URL":[]},{"Code":"EXAMPLE 1 - UNRELATED ABSOLUTE URL AS INPUT\nBASE URL : https://hestia.zoralab.com/default-path\nIN PAGE  : https://hestia.zoralab.com/default-path/this-page/\nINPUT    : https://www.example.com/\nOUTPUT   : https://www.example.com/\n\n\nEXAMPLE 2 - RELATIVE TO SITE AS INPUT\nBASE URL : https://hestia.zoralab.com/default-path/\nIN PAGE  : https://hestia.zoralab.com/default-path/this-page/\nINPUT    : /my-page\nOUTPUT   : https://hestia.zoralab.com/default-path/my-page\n\n\nEXAMPLE 3 - RELATIVE TO PAGE (NOTE: NO LEADING FORWARD SLASH '/')\nBASE URL : https://hestia.zoralab.com/default-path/\nIN PAGE  : https://hestia.zoralab.com/default-path/this-page/\nINPUT    : my-page\nOUTPUT   : https://hestia.zoralab.com/default-path/this-page/my-page\n","Description":"hestiaHUGO deploys its own URL data processor (called 'hestiaURL/Sanitize'\npartial function). We strongly encourage using relative URL for pre-compilations\n(e.g. your page templates and etc) while letting hestiaHUGO to compile it to\nabsolute URL as output. Visitor should always get the absolute URL in no matter\nwhat condition. The function is RFC3986 compliant so be careful with your\nrelative URL construction. Here are the explanation examples:\n","Level":2,"Media":{},"Title":"Understand How hestiaHUGO Process URL","URL":[{"Label":"RFC3986 URL Specification","URL":"https://www.rfc-editor.org/rfc/rfc3986"}]},{"Code":"...\n\n{{- /* render outputs */ -}}\n\u003cmain\u003e\n\t\u003csection id='introduction' class='banner'\u003e\n\t\t\u003ch1\u003e{{- .Titles.Page -}}\u003c/h1\u003e\n\t\t\u003cp\u003e{{- .Descriptions.Page.Pitch }} {{ .Descriptions.Page.Summary -}}\u003c/p\u003e\n\n\n\t\t{{- $ret := merge . (dict \"Input\" (dict \"Data\" \"/en/\")) -}}\n\t\t{{- $ret = partial \"hestiaURL/Sanitize\" $ret -}}\n\t\t\u003ca class='button' href='{{- $ret -}}'\u003eBack HOME\u003c/a\u003e\n\t\u003c/section\u003e\n\u003c/main\u003e\n","Description":"For hestiaHUGO, the corresponding file is specified in the __page.toml control\nfile's 'Sources.HTML' field. The default is the relative file\n'__content.hestiaHTML' in the same directory. Since we're beginner, we should\nuse the default '__content.hestiaHTML' file. Let's open it and take a look. If\nyou're a seasoned Hugo developer, you will immediately notice that the Go\ntemplate (and Hugo's partial) functions are used instead of Hugo specific\nMarkdown and shortcodes. When using any ZORALab's Hestia product, we strive to\nbe as portable and nimble as possible across them with minimal learning cost. If\nyou're already familiar with Go template from Go Programming Language, then\nevery piece of your rendering knowledge is automatically and fully transferred\nhere. For this tutorial, let's update it with the following contents. Once done,\ntry visit the URL + /en/404/ web page presented by the Hugo server. You can\nverify the HTML-only rendering of the page.\n","Level":2,"Media":{},"Title":"Create Page HTML Content","URL":[]},{"Code":"","Description":null,"Level":2,"Media":{"Autoplay":false,"CORS":"anonymous","Control":false,"Decorative":false,"Design":"","Height":600,"Inline":false,"Loading":"lazy","Loop":false,"Mute":false,"Name":"The Screenshot of the Debugger Console","Preload":"","Relationship":"","Sizes":"600x600","Sources":{"0":{"Descriptor":"1x","Media":"(min-width: 600px)","Type":"image/avif","URL":{"Scheme":"https","Opaque":"","User":null,"Host":"hestia.zoralab.com","Path":"/img/getting-started/hestiahugo-debugger-console-600x600.avif","RawPath":"","OmitHost":false,"ForceQuery":false,"RawQuery":"","Fragment":"","RawFragment":""}},"1":{"Descriptor":"1x","Media":"(min-width: 600px)","Type":"image/webp","URL":{"Scheme":"https","Opaque":"","User":null,"Host":"hestia.zoralab.com","Path":"/img/getting-started/hestiahugo-debugger-console-600x600.webp","RawPath":"","OmitHost":false,"ForceQuery":false,"RawQuery":"","Fragment":"","RawFragment":""}},"2":{"Descriptor":"1x","Media":"(min-width: 600px)","Type":"image/jpeg","URL":{"Scheme":"https","Opaque":"","User":null,"Host":"hestia.zoralab.com","Path":"/img/getting-started/hestiahugo-debugger-console-600x600.jpg","RawPath":"","OmitHost":false,"ForceQuery":false,"RawQuery":"","Fragment":"","RawFragment":""}},"3":{"Descriptor":"1x","Media":"(min-width: 300px)","Type":"image/avif","URL":{"Scheme":"https","Opaque":"","User":null,"Host":"hestia.zoralab.com","Path":"/img/getting-started/hestiahugo-debugger-console-400x400.avif","RawPath":"","OmitHost":false,"ForceQuery":false,"RawQuery":"","Fragment":"","RawFragment":""}},"4":{"Descriptor":"1x","Media":"(min-width: 300px)","Type":"image/webp","URL":{"Scheme":"https","Opaque":"","User":null,"Host":"hestia.zoralab.com","Path":"/img/getting-started/hestiahugo-debugger-console-400x400.webp","RawPath":"","OmitHost":false,"ForceQuery":false,"RawQuery":"","Fragment":"","RawFragment":""}},"5":{"Descriptor":"1x","Media":"(min-width: 300px)","Type":"image/jpeg","URL":{"Scheme":"https","Opaque":"","User":null,"Host":"hestia.zoralab.com","Path":"/img/getting-started/hestiahugo-debugger-console-400x400.jpg","RawPath":"","OmitHost":false,"ForceQuery":false,"RawQuery":"","Fragment":"","RawFragment":""}},"6":{"Descriptor":"1x","Media":"all","Type":"image/avif","URL":{"Scheme":"https","Opaque":"","User":null,"Host":"hestia.zoralab.com","Path":"/img/getting-started/hestiahugo-debugger-console-220x220.avif","RawPath":"","OmitHost":false,"ForceQuery":false,"RawQuery":"","Fragment":"","RawFragment":""}},"7":{"Descriptor":"1x","Media":"all","Type":"image/webp","URL":{"Scheme":"https","Opaque":"","User":null,"Host":"hestia.zoralab.com","Path":"/img/getting-started/hestiahugo-debugger-console-220x220.webp","RawPath":"","OmitHost":false,"ForceQuery":false,"RawQuery":"","Fragment":"","RawFragment":""}},"8":{"Descriptor":"1x","Media":"all","Type":"image/jpeg","URL":{"Scheme":"https","Opaque":"","User":null,"Host":"hestia.zoralab.com","Path":"/img/getting-started/hestiahugo-debugger-console-220x220.jpg","RawPath":"","OmitHost":false,"ForceQuery":false,"RawQuery":"","Fragment":"","RawFragment":""}}},"Tracks":{},"Width":600},"Title":"Understand How hestiaHUGO Renders Page Data","URL":[]},{"Code":"__data.toml + __i18n.toml + ...   (NOTE: follows __page.toml data files list)\n             ⤋\n         .Field.[...]\n             ⤋\n     {{- .Field.[...] -}}\n","Description":"hestiaHUGO finalized its design by having 'content' directory supplying the\nsite URL and having each of its directory delivers the page data. Remember the\n'__i18n.toml' and '__data.toml' in the page directories? Those data files are\nlisted in __page.toml's \"[[Data]]\" array list. hestiaHUGO maintains absolute\nfreedom for page designer to construct the Page level data structure. After\nparsing and merging all the data files, all the data can be accessed via\nhestiaHUGO.Page data field. Other config files are obviously provide various\ndifferent values for different data fields. Feel free to explore around and\ncheck them via the on-screen debugger console. This is how you source your data\nkey:value when designing your page. The link below is the technical\nspecification of the hestiaHUGO.Page data structure (browse when you're free, we\nwill move forward for now).\n","Level":2,"Media":{},"Title":"Understand hestiaHUGO Data Path","URL":[{"Label":"Data Structure \u0026 Specs","URL":"https://hestia.zoralab.com/en/specs/hestiacompilers/hestiahugo/"}]},{"Code":"","Description":"hestiaHUGO supplies its own standard libraries just like other ZORALab's Hestia\ncomponents. Notice the use of 'hestiaURL.Sanitize' partial function above? It\nconverts a given ambigious URL into a proper full absolute URL consistently in\naccoradance to hestiaHUGO URL management explained in the 1st step. The sole\npurpose of preparing our own standard libraries is to make sure we have\nabsolute consistency as we grow ZORALab's Hestia and not Hugo's output\ninconsitencies AND maintaining inter-operability with other components. All\nZORALab's Hestia libraries are documented in the same context across all\ncomponents in our specifications section. You should explore all available\nhestiaHUGO API to advance your development at your own time. For this tutorial,\nwe will proceed further.\n","Level":2,"Media":{},"Title":"Understand How hestiaHUGO Empowers Hugo","URL":[{"Label":"Specification","URL":"https://hestia.zoralab.com/en/specs/"}]},{"Code":"...\n[[List]]\nName = \"zoralabCORE\"\nInclude = true\nVariables = [\n        { \"--body-scroll-behavior\" = \"smooth\" },\n]\n\n[[List]]\nName = \"zoralabFONT_NOTOSANS\"\nInclude = true\nVariables = []\n\n[[List]]\nName = \"zoralabANCHOR\"\nInclude = true\nVariables = []\n\n[[List]]\nName = \"zoralabBUTTON\"\nInclude = true\nVariables = []\n","Description":"Now that we verified the data shown in HTML-only page is correct, we can now\nstyle it. hestiaHUGO uses the UI components approach to compile all necessary\nproceed to edit '/en/404/__components.toml' and add the following components\nafter the commented guide. Give the server a few moment and refresh the web\npage. You can see it's being compiled with styling (especially the\ncall-to-action anchor link). Check out the CSS codes in the CSS.Inline section\nof the debugger console. It's filled with the compiled CSS codes.\n","Level":2,"Media":{},"Title":"Create Page UI Components Styling List","URL":[]},{"Code":"","Description":null,"Level":2,"Media":{},"Title":"Understand How hestiaHUGO Manage Page Styling","URL":[{"Label":"UI Components Catalog","URL":"https://hestia.zoralab.com/en/specs/hestiagui/"}]},{"Code":"","Description":null,"Level":2,"Media":{},"Title":"Understand Why hestiaHUGO Containerized Page Styling","URL":[]},{"Code":"...\n\n[[List]]\nName = \"zoralabCORE\"\nInclude = true\nVariables = [\n        { \"--body-scroll-behavior\" = \"smooth\" },   # this overrides the default value 'none'\n]\n\n...\n","Description":null,"Level":2,"Media":{},"Title":"Understand How hestiaHUGO UI Component Works","URL":[]},{"Code":"","Description":"For 2 primary reasons: (1) supporting privacy-first content rendering\n(JS disabled). In year 2022 during the Covid19 pandemic, everyone was concerned\nabout privacy and data leak so having a complete JavaScript disabled use case is\ntotally unsurprising. In that situation, your famous JS Frameworks and our WASM\nare completely unsable but the site is still expected present correctly; AND (2)\nZORALab's Hestia intend to replace JavaScript entirely with WASM compiled\nusing proper programming languages like Go or Nim in the future. It is a lot\neasier and seamless to port the HTML+CSS only UI component into the WASM\ncounterpart (as in no JavaScript interference). That being said, you can\nstill use JavaScript (as shown in later steps). In ZORALab's Hestia, we don't do\nidiotic and autocratic goverance like some technology's governors did that\nrestrict anyone freedom of use and artistic expression.\n","Level":2,"Media":{},"Title":"Understand Why ZORALab's Hestia Only Prioritize HTML \u0026 CSS","URL":[]},{"Code":"","Description":"Let's face it: JavaScript is the only programming language for web UI behavior\npacked with weird and inconsistencies. It's problematic weaknesses gave birth to\nvarious frameworks like Angular and Typescript of itself trying to workaround\nthem but introduced their own. With the birth of WASM, ZORALab wants to solve\nthe problem heads-on. We do not hate the language but finding development with\nit comes is very risky. A lot of outdated JS frameworks in the past trying to\nreplace one another had already proven the point.\n","Level":2,"Media":{},"Title":"Understand ZORALab and JavaScript Relationship","URL":[]},{"Code":"","Description":"In order to realize our ultimate goal for web technologies, there are 3 specific\nuse cases: (1) Discovery page like SEO \u0026 SMO; (2) Single App - 1 WASM implements\nthe entire site; and (3) Reactive Rendering (each page has its own WASM\nrenderer). hestiaHUGO fulfills primarily on use case (1) while facilitating WASM\nhosting for use cases (2) and (3). That's why we are still facilitating Hugo and\nso far it is still the best frontend static site generator (and now, a\ncompiler).\n","Level":2,"Media":{},"Title":"Understand hestiaHUGO Future","URL":[]},{"Code":"main {\n\theight: 100vh;\n\twidth: 100vw;\n\n\t isplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tbackground: linear-gradient(245deg,\n\t\t\t\t\t#192fe3,\n\t\t\t\t\t#19e33b,\n\t\t\t\t\t#bbe319,\n\t\t\t\t\t#e35019,\n\t\t\t\t\t#e31919,\n\t\t\t\t\t#e319c1);\n\tbackground-size: 1200% 1200%;\n\n\tanimation: BgDiscoFlasher 4s ease infinite;\n}\n\n@keyframes BgDiscoFlasher {\n\t0%{background-position:0% 86%}\n\t50%{background-position:100% 15%}\n\t100%{background-position:0% 86%}\n}\n\n.banner {\n\twidth: 50%;\n\tmax-height: fit-content;\n\n\tpadding: 5rem;\n\tborder-radius: 2rem;\n\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n\n\tbackground: rgba(255, 255, 255, .75);\n}\n","Description":"Now that the page is styled (that looks common across all users), you can\ncustomize on top the currently compiled CSS codes. Simply edit the file\n'__content.hestiaCSS' and place your page-level CSS codes in it. For this\ntutorial, we will be using the following CSS customization codes. hestiaHUGO\nwill recompile your CSS file as the last inline-type asset. Once done, refresh\nthe page and you'll observe your 404 page is disco-ing with colors.\n","Level":2,"Media":{},"Title":"Customize Page Styling with CSS","URL":[]},{"Code":"window.onload = function() {\n\tconsole.log(\"\\nMeow~~~~ ₍⌯ᴖⱅᴖ⌯ ^₎◞ ̑̑ෆ⃛ \\n\\n\");\n};\n","Description":"Likewise, you can also customize the page with JavaScript. The responsible file\nis '__content.hestiaJS'. While the page is no longer needing further styling,\nfor this education purpose, let's temporarily add the following code block in\nand check out the browser' inspect console (F12 button). You should observe a\ncat meowing. Same case: this JavaScript is the last inline JavaScript to be\nincluded in the page.\n","Level":2,"Media":{},"Title":"Customize Page with JavaScript","URL":[]},{"Code":"...\n{{- /* prepare variables for function */ -}}\n...\n\n\n\n{{- /* execute function */ -}}\n{{- $dataList = merge $dataList (partial \"hestiaJSON/schemaorgLDJSON/WebPage\" .) -}}\n\n\n\n\n{{- /* render output */ -}}\n...\n","Description":"hestiaHUGO has a built-in support for Schema.org complex data structuring of\nyour page. The responsible file is '__content.hestiaLDJSON'. Since this is a 404\npage, we will add the following code block will do. Once the Hugo server is fully\nupdated, you can proceed to obtain the output from our on-screen debugger\nconsole and validate at Schema.org validator site.\n","Level":2,"Media":{},"Title":"Update LD+JSON Data for SEO","URL":[{"Label":"LD+JSON Validator","URL":"https://validator.schema.org/"}]},{"Code":"","Description":"To maintain balance between freedom of expression and rigidity for consistent\noutput, there are 2 things to remember: (1) hestiaHUGO can only quickly help you\nprocess the base level dataset of known common data types (e.g. authors,\npage type, etc); and (2) you need to add in the page context-specific dataset\n(e.g. recipe steps, etc).\n","Level":2,"Media":{},"Title":"Understand How hestiaHUGO Handles LD+JSON","URL":[{"Label":"Schema.org Data Structures","URL":"https://schema.org/docs/full.html"}]},{"Code":"HINT\n$ git add .\n","Description":"Now the HTML output is done deal, we should git stage it. However, we are not\nquite done yet. Proceed to next step:\n","Level":2,"Media":{},"Title":"Stage the Current State","URL":[]},{"Code":"","Description":"By default, hestiaHUGO supports JSON output type as secondary output format.\nThis is using the hestiaHUGO internal feature; not the Hugo one. Like LD+JSON,\nyou can construct a customer usable dataset using the Go template function.\nUnlike LD+JSON, this is a pure JSON output (viewable by appending 'index.json'\nat the end of the page URL) unrestricted by Schema.org schematic. The\nresponsible file defined by '__page.toml's '.Source.JSON' value (default is the\nrelative '__content.hestiaJSON'). Since this is 404 page, we can leave it as it\nis. You can study the default codes for educational purposes.\n","Level":2,"Media":{},"Title":"Create JSON Output","URL":[]},{"Code":"","Description":"5 main reasons: (1) Allows one to use hestiaHUGO as a CDN-driven open data API\nserver; AND (2) A backup reason for using Hugo after search engine giants\nnearly destroyed SEO in the past solely for SMO ad revenues; AND\n(3) Provides alternatives and freedom compared to LD+JSON implementations; AND\n(4) making sure hestiaHUGO can support multiple output feature natively\nin a very consistent manner; AND (5) Facilitate a way to feed AI\ntraining data. The default processor is configured in a way as an option\nfor those who do not want to use it so if you're not using it, don't\nbother touching \u003ccode\u003e__content.hestiaJSON\u003c/code\u003e file at all.\n","Level":2,"Media":{},"Title":"Understand Why hestiaHUGO Natively Supports JSON Output","URL":[]},{"Code":"HINT\n$ git add .\n$ git commit -s\n----\n... write a good git message as shown in previous tutorial ...\n----\n$ git push\n","Description":"At this point, we had completed designing a basic and simple 404 page. You can\nproceed to Git commit and push out.\n","Level":2,"Media":{},"Title":"Commit and Push","URL":[]},{"Code":"","Description":"If you haven't realize, hestiaHUGO only takes 1 set of input dataset and\ngenerated to various outputs type while supporting multiple languages at the\nsame time. In fact, it generates more like page-level 'sitemap.xml' and\n'sitemap-page.xml' as well. This is one of the problem we're trying to solve when\nusing Hugo: 1 consistent input dataset to multiple outputs consistently. These\nare just a scratch of the surface. We will explore more as you go through the\ntutorials walkthrough.\n","Level":2,"Media":{},"Title":"Remember the Strength of hestiaHUGO","URL":[]},{"Code":"","Description":"Now that we had completed the hestiaHUGO setup, the next step is to make sure\nwe support multilingual pages from the get go. Here's the URL for the next step:\n","Level":2,"Media":{},"Title":"What's Next?","URL":[{"Label":"Using Multilingual Pages from the Get Go","URL":"https://hestia.zoralab.com/en/getting-started/using-multilingual-pages-from-the-get-go/"}]}],"Description":"Through creating simple pages, we learn how hestiaHUGO operates. A step-by-step guide for hestiaHUGO — ZORALab's Hestia Hugo module.","Title":"Create Basic and Placeholder Hugo Pages"}