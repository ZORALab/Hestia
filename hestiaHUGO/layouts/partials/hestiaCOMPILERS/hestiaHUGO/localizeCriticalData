{{- /*
Copyright 2023 "Holloway" Chew, Kean Ho <kean.ho.chew@zoralab.com>
Copyright 2023 ZORALab Enterprise <tech@zoralab.com>


Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
*/ -}}
{{- /* INPUT PARAMETERS */ -}}
{{- /* . = Unprocessed Page data in Hestia Data Structure */ -}}




{{- /* prepare working variables for this function */ -}}
{{- $Page := . -}}
{{- $Local := dict -}}
{{- $location := dict -}}
{{- $data := false -}}
{{- $ret := false -}}




{{- /* parse local page config file */ -}}
{{- $Local = printf "%s/%s" .Filesystem.Directory "__page.toml" -}}
{{- $Local = merge $Page (dict "Input" (dict "Path" (path.Clean $Local))) -}}
{{- $Local = partial "hestiaIO/hestiaFS/ParseDataFile" $Local -}}
{{- $Local = $Local.Output -}}
{{- if not $Local -}}
	{{- $Local = dict
		"Data" slice
		"Description" dict
		"Keywords" slice
		"Redirect" dict
		"Date" dict
		"Sources" dict
	-}}
{{- end -}}




{{- /* source .Sources */ -}}
{{- $ret = default dict $Local.Sources -}}
{{- $Page = merge $Page (dict
	"Content" (dict
		"HTML" (default "__content.hestiaHTML" $ret.HTML)
		"JSON" (default "__content.hestiaJSON" $ret.JSON)
	)

	"LDJSON" (default "__content.hestiaLDJSON" $ret.LDJSON)

	"CSS" (dict
		"Source" (default "__assets.toml" $ret.Assets)
		"Main" (default "__content.hestiaCSS" $ret.CSS)
	)

	"JS" (dict
		"Main" (default "__content.hestiaJS" $ret.JS)
	)

	"Components" (default "__components.toml" $ret.Components)
) -}}


{{- $location = merge $location (dict
	"Contributors" (default "__contributors.toml" $ret.Contributors)
	"Thumbnails" (default "__thumbnails.toml" $ret.Thumbnails)
	"Languages" (default "__languages.toml" $ret.Languages)
) -}}




{{- /* source .Time */ -}}
{{- if $Local.Date -}}
	{{- if index $Local.Date "Created" -}}
		{{- $Page = merge $Page (dict
			"Time" (dict
				"Created" $Local.Date.Created
			)
		) -}}
	{{- end -}}


	{{- if index $Local.Date "Published" -}}
		{{- $Page = merge $Page (dict
			"Time" (dict
				"Published" $Local.Date.Published
			)
		) -}}
	{{- end -}}
{{- end -}}




{{- /* source .Data */ -}}
{{- range $i, $v := $Local.Data -}}
	{{- $Page = merge $Page (dict
		"Data" (dict
			"Page" (dict
				(string $i) (printf "%s/%s" $Page.Filesystem.Directory $v.Filename)
			)
		)
	) -}}
{{- end -}}




{{- /* source .Titles.Page */ -}}
{{- if index $Local "Content" -}}
	{{- if index $Local.Content "Title" -}}
		{{- $Page = merge $Page (dict
			"Titles" (dict
				"Page" $Local.Content.Title
			)
		) -}}
	{{- end -}}
{{- end -}}




{{- /* source .Description */ -}}
{{- $data = index $Local "Description" -}}
{{- if $data -}}
	{{- if index $data "Pitch" -}}
		{{- $Page = merge $Page (dict
			"Descriptions" (dict
				"Page" (dict
					"Pitch" $data.Pitch
				)
			)
		) -}}
	{{- end -}}


	{{- if index $data "Summary" -}}
		{{- $Page = merge $Page (dict
			"Descriptions" (dict
				"Page" (dict
					"Summary" $data.Summary
				)
			)
		) -}}
	{{- end -}}
{{- end -}}




{{- /* source .Redirect */ -}}
{{- if index $Local "Redirect" -}}
	{{- if index $Local.Redirect "Language" -}}
		{{- $ret = dict
			"Redirect" (dict
				"Delay" (default 0 $Local.Redirect.Delay)
				"URL" (default "" $Local.Redirect.URL)
				"Enabled" (default false $Local.Redirect.Enabled)
				"Language" (dict
					"Enabled" (default false $Local.Redirect.Language.Enabled)
				)
			)
		-}}
	{{- else -}}
		{{- $ret = dict
			"Redirect" (dict
				"Delay" (default 0 $Local.Redirect.Delay)
				"URL" (default "" $Local.Redirect.URL)
				"Enabled" (default false $Local.Redirect.Enabled)
				"Language" (dict
					"Enabled" false
				)
			)
		-}}
	{{- end -}}


	{{- $Page = merge $Page $ret -}}
{{- end -}}




{{- /* source .Keywords */ -}}
{{- $ret = default dict (index $Local "Content") -}}
{{- range $i, $v := (default slice $ret.Keywords) -}}
	{{- if not $v -}}
		{{- continue -}}
	{{- end -}}


	{{- $Page = merge $Page (dict
		"Keywords" (dict
			"List" (dict
				(string $i) $v
			)
		)
	) -}}
{{- end -}}




{{- /* source .Thumbnails */ -}}
{{- $Local = false -}}
{{- range $i, $v := $Page.Constants.Filesystem.Prefixes -}}
	{{ if strings.HasPrefix $location.Thumbnails $v -}}
		{{- $Local = true -}}
	{{- end -}}
{{- end -}}


{{- if $Local -}}
	{{- $Local = $location.Thumbnails -}}
{{- else -}}
	{{- $Local = printf "%s/%s" $Page.Filesystem.Directory $location.Thumbnails -}}
{{- end -}}
{{- $Local = merge $Page (dict "Input" (dict "Path" (path.Clean $Local))) -}}


{{- $Local = partial "hestiaIO/hestiaFS/ParseDataFile" $Local -}}
{{- if $Local.Error -}}
	{{- $Local = slice -}}
{{- else -}}
	{{- $Local = index $Local.Output "Contents" -}}
	{{- if not $Local -}}
		{{- $Local = slice -}}
	{{- end -}}
{{- end -}}


{{- range $i, $v := $Local -}}
	{{- $ret = partial "hestiaCOMPILERS/hestiaHUGO/_parseMedia" $v -}}
	{{- if $ret -}}
		{{- $Page = merge $Page (dict "Thumbnails" (dict (lower $i) false)) -}}
		{{- $Page = merge $Page (dict "Thumbnails" (dict (lower $i) $ret)) -}}
	{{- end -}}
{{- end -}}




{{- /* source .Languages */ -}}
{{- $Local = false -}}
{{- range $i, $v := $Page.Constants.Filesystem.Prefixes -}}
	{{ if strings.HasPrefix $location.Languages $v -}}
		{{- $Local = true -}}
	{{- end -}}
{{- end -}}

{{- if $Local -}}
	{{- $Local = $location.Languages -}}
{{- else -}}
	{{- $Local = printf "%s/%s" $Page.Filesystem.Directory $location.Languages -}}
{{- end -}}
{{- $Local = merge $Page (dict "Input" (dict "Path" (path.Clean $Local))) -}}
{{- $Local = partial "hestiaIO/hestiaFS/ParseDataFile" $Local -}}
{{- $Local = $Local.Output -}}


{{- range $k, $v := $Local -}}
	{{- if not (index $v "URL") -}}
		{{- continue -}}
	{{- end -}}

	{{- $Page = merge $Page (dict
		"Languages" (dict
			"List" (dict
				(string $k) (dict
					"URL" (dict
						"PAGE" (urls.Parse $v.URL)
					)
				)
			)
		)
	) -}}
{{- end -}}




{{- /* source .Contributors */ -}}
{{- $Local = false -}}
{{- range $i, $v := $Page.Constants.Filesystem.Prefixes -}}
	{{ if strings.HasPrefix $location.Contributors $v -}}
		{{- $Local = true -}}
	{{- end -}}
{{- end -}}


{{- if $Local -}}
	{{- $Local = $location.Contributors -}}
{{- else -}}
	{{- $Local = printf "%s/%s" $Page.Filesystem.Directory $location.Contributors -}}
{{- end -}}
{{- $Local = merge $Page (dict "Input" (dict "Path" (path.Clean $Local))) -}}
{{- $Local = partial "hestiaIO/hestiaFS/ParseDataFile" $Local -}}


{{- if index $Local.Output "Contributors" -}}
	{{- $Local = $Local.Output.Contributors -}}
{{- else -}}
	{{- $Local = dict -}}
{{- end -}}


{{- range $k, $v := $Local -}}
	{{- if not (index $v "Key") -}}
		{{- continue -}}
	{{- end -}}

	{{- if not (index $v "Contribution") -}}
		{{- continue -}}
	{{- end -}}

	{{- /* extract creator data */ -}}
	{{- range $j, $w := $Page.Constants.Contributors.Roles -}}
		{{- $ret = false -}}
		{{- if index $v.Contribution $w -}}
			{{- $ret = true -}}
		{{- end -}}

		{{- $Page = merge $Page (dict
			"Contributors" (dict
				"Page" (dict
					$v.Key (dict
						"Contribution" (dict
							$w $ret
						)
					)
				)
			)
		) -}}
	{{- end -}}
{{- end -}}




{{- /* render output */ -}}
{{- return $Page -}}
