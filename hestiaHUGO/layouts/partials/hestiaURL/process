{{- /*
Copyright 2022 "Holloway" Chew, Kean Ho <kean.ho.chew@zoralab.com>
Copyright 2022 ZORALab Enterprise <tech@zoralab.com>


Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
*/ -}}
{{- /* INPUT PARAMETERS */ -}}
{{- /* . = Page data in Hestia Structure */ -}}
{{- /* .URL.Current = Current Page URL. */ -}}
{{- /* .URL.Base = Current Page's Base URL. */ -}}
{{- /* .Formats.Current = Current Page's Format File Type. */ -}}
{{- /* .Languages.Current = Current Page's Language. */ -}}

{{- /* .Input.URL = given URL in any form for synthesis. (string) */ -}}
{{- /* .Input.Format.Protocol = selected format protocol. (optional,string) */ -}}
{{- /* .Input.Format.Filename = selected format filename. (optional,string) */ -}}
{{- /* .Input.Format.Extension = selected format extension. (optional,string) */ -}}
{{- /* .Input.Lang = overrides language code. (optional,string) */ -}}




{{- /* RFC3986-COMPLIANCE IMPORTANT NOTE */ -}}
{{- /* 1. The URL synthesizer here is only limited to parsing proper URL. */ -}}
{{- /*    Any differences shall render unpredictable effects.             */ -}}
{{- /*    Proper URL **SHALL** have the following in sequence:            */ -}}
{{- /*    1.1. ONE (1) scheme                                             */ -}}
{{- /*    1.2. ONE (1) hier part                                          */ -}}
{{- /*    1.3. ONE (1) query part                                         */ -}}
{{- /*    1.4. ONE (1) fragment                                           */ -}}
{{- /*    1.5. ONE (1) user authority                                     */ -}}




{{- /* prepare working variables for this function */ -}}
{{- $dataList := "" -}}
{{- $list := dict -}}
{{- $base := dict -}}
{{- $given := dict -}}
{{- $lang := false -}}
{{- $IsRelativeToPage := false -}}
{{- $replaceLang := false -}}
{{- $ret := false -}}




{{- /* STAGE 1: PROCESS URL */ -}}
{{- $given = urls.Parse .Input.URL -}}
{{- if $given.Scheme -}}
	{{- /* IT IS A COMPLETE AND UNRELATED URL. DO NO EDIT ANYTHING */ -}}
	{{- $dataList = .Input.URL -}}
{{- else -}}
	{{- /* PART I - CHECK CURRENT PAGE RELATIVITY */ -}}
	{{- if not (hasPrefix $given.Path "/") -}}
		{{- $IsRelativeToPage = true -}}
	{{- end -}}




	{{- /* PART II - CONSTRUCT PROTOCOL SEGMENT */ -}}
	{{- $ret = .URL.Base -}}
	{{- if $IsRelativeToPage -}}
		{{- $ret = .URL.Current.Absolute -}}
	{{- end -}}


	{{- $base = urls.Parse $ret -}}
	{{- $ret = "https" -}}
	{{- if $base.Scheme -}}
		{{- $ret = $base.Scheme -}}
	{{- end -}}
	{{- $dataList = printf "%s://" $ret -}}


	{{- if .Input.Format -}}
		{{- if not (eq .Input.Format.Protocol $dataList) -}}
			{{- $dataList = .Input.Format.Protocol -}}
		{{- end -}}
	{{- end -}}




	{{- /* PART III - CONSTRUCT USER CREDENTIALS SEGMENT */ -}}
	{{- if $base.User -}}
		{{- $ret = $base.User.String -}}
		{{- if $ret -}}
			{{- $dataList = printf "%s%s@" $dataList $ret -}}
		{{- end -}}
	{{- end -}}




	{{- /* PART IV - CONSTRUCT BASE PATHING SEGMENT */ -}}
	{{- $dataList = printf "%s%s" $dataList $base.Host -}}


	{{- $ret = $base.Path -}}
	{{- if path.Ext $base.Path -}}
		{{- $ret = path.Dir $base.Path -}}
	{{- end -}}
	{{- $ret = strings.TrimPrefix "/" $ret -}}


	{{- $dataList = strings.TrimSuffix "/" $dataList -}}
	{{- $dataList = printf "%s/%s" $dataList $ret -}}




	{{- /* PART V - CONFIGURE LANGUAGE PATHING SEGMENT */ -}}
	{{- $lang = .Languages.Current.Code -}}
	{{- $ret = strings.TrimPrefix "/" $given.Path -}}
	{{- range $k, $v := .Languages.List -}}
		{{- if $IsRelativeToPage -}}
			{{- continue -}}
		{{- else if strings.HasPrefix $ret $v.Code -}}
			{{- $lang = $v.Code -}}
			{{- $replaceLang = true -}}
		{{- end -}}
	{{- end -}}
	{{- if .Input.Lang -}}
		{{- $lang = .Input.Lang -}}
	{{- end -}}


	{{- if not $IsRelativeToPage -}}
		{{- if $replaceLang -}}
			{{- $dataList = strings.TrimSuffix "/" $dataList -}}
			{{- $lang = strings.TrimPrefix "/" $lang -}}
			{{- $dataList = printf "%s/%s" $dataList $lang -}}
		{{- end -}}
	{{- end -}}




	{{- /* PART VI - JOINING GIVEN PATHING SEGMENT */ -}}
	{{- $ret = $given.Path -}}
	{{- if path.Ext $ret -}}
		{{- $ret = path.Dir $ret -}}
	{{- end -}}


	{{- if or (eq $ret ".") (eq $ret "./") -}}
		{{- $ret = "" -}}
	{{- end -}}
	{{- $ret = strings.TrimSuffix "/" $ret -}}
	{{- $ret = printf "%s/" $ret -}}


	{{- $ret = strings.TrimPrefix "/" $ret -}}
	{{- if not $IsRelativeToPage -}}
		{{- $ret = strings.TrimPrefix $lang $ret -}}
		{{- $ret = strings.TrimPrefix "/" $ret -}}
	{{- end -}}
	{{- $dataList = strings.TrimSuffix "/" $dataList -}}
	{{- $dataList = printf "%s/%s" $dataList $ret -}}




	{{- /* PART VII - PROCESS FILEPATH SEGMENT */ -}}
	{{- $ret = "" -}}
	{{- if path.Ext $given.Path -}}
		{{- $ret = path.Base $given.Path -}}
	{{- end -}}


	{{- if .Input.Format -}}
		{{- /* clear replacable filename and extension */ -}}
		{{- range $k, $v := .Formats.List -}}
			{{- if not $ret -}}
				{{- continue -}}
			{{- else if eq $ret (printf "%s%s" $v.Filename $v.Extension) -}}
				{{- $ret = false -}}
			{{- end -}}
		{{- end -}}

		{{- if not $ret -}}
			{{- $ret = printf "%s%s"
				.Input.Format.Filename
				.Input.Format.Extension -}}
		{{- end -}}
	{{- end -}}

	{{- if $ret -}}
		{{- $ret = strings.TrimPrefix "/" $ret -}}
		{{- $dataList = strings.TrimSuffix "/" $dataList -}}
		{{- $dataList = printf "%s/%s" $dataList $ret -}}
	{{- end -}}




	{{- /* PART VIII - CONSTRUCT QUERY SEGMENT */ -}}
	{{- if $given.RawQuery -}}
		{{- $ret = $given.RawQuery -}}

		{{- $ret = strings.TrimPrefix "/" $ret -}}
		{{- $dataList = printf "%s?%s" $dataList $ret -}}
	{{- end -}}




	{{- /* PART IX - CONSTRUCT FRAGMENT SEGEMENT */ -}}
	{{- if $given.Fragment -}}
		{{- $ret = $given.Fragment -}}

		{{- $ret = strings.TrimPrefix "/" $ret -}}
		{{- $dataList = printf "%s#%s" $dataList $ret -}}
	{{- end -}}
{{- end -}}




{{- if not .Input.URL -}}
	{{- $dataList = "" -}}
{{- end -}}




{{- /* STAGE 2 - CONVERT TO URL TYPE */ -}}
{{- $dataList = urls.Parse $dataList -}}




{{- /* render output */ -}}
{{- return $dataList  -}}
