{{- /* INPUT PARAMETERS */ -}}
{{- /* . = Page data in Hestia Structure */ -}}
{{- /* .Input.CORS = media CORS (string) */ -}}




{{- /* prepare working variables for this function */ -}}
{{- $Page := partial "Hestia/functions/data/Clean" . -}}
{{- $dataList := "" -}}
{{- $console := dict -}}




{{- /* process CORS data when given */ -}}
{{- $dataList = merge . (dict "Input" (dict "Query" ".Input.CORS")) -}}
{{- $dataList = partial "Hestia/functions/data/Get" $dataList -}}
{{- if not $dataList -}}
	{{- $dataList = "" -}}
{{- end -}}


{{- if $dataList -}}
	{{- $dataList = merge $Page (dict "Input" (dict "CORS" $dataList)) -}}
	{{- $dataList = partial "Hestia/functions/data/cors/Init" $dataList -}}
	{{- if $dataList.Console -}}
		{{- $console = printf "bad .CORS: %s"
			$dataList.Console.Message -}}
		{{- $console = dict "Message" $console -}}
		{{- $dataList = "" -}}
	{{- else -}}
		{{- $dataList = $dataList.Output -}}
	{{- end -}}




	{{- /* validate media CORS type */ -}}
	{{- if (partial "Hestia/functions/data/cors/IsAnonymous"
		$dataList)
		| or (partial "Hestia/functions/data/cors/IsUseCredentials"
		$dataList)
	-}}
		{{- /* PASS - keep the value */ -}}
	{{- else -}}
		{{ if not $console -}}
			{{- $console = printf "invalid .CORS - %v\n"
				$dataList -}}
			{{- $console = dict "Message" $console -}}
		{{- end -}}

		{{- $dataList = "" -}}
	{{- end -}}
{{- end -}}




{{- /* render output */ -}}
{{- return dict "Output" $dataList "Console" $console -}}
