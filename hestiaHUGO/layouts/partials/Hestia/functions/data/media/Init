{{- /*
Copyright 2022 "Holloway" Chew, Kean Ho <kean.ho.chew@zoralab.com>
Copyright 2022 ZORALab Enterprise <tech@zoralab.com>


Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
*/ -}}
{{- /* INPUT PARAMETERS */ -}}
{{- /* . = Page data in Hestia Structure */ -}}
{{- /* .Input.Name                    = alt-text or title (string) */ -}}
{{- /* .Input.Width                   = frame width (number/string) */ -}}
{{- /* .Input.Height                  = frame height (number/string) */ -}}
{{- /* .Input.Sources                 = media download source (slice) */ -}}
{{- /* .Input.Sources.[ARRAY_N].URL   = source URL (url) */ -}}
{{- /* .Input.Sources.[ARRAY_N].Type  = source MIME type (string) */ -}}
{{- /* .Input.Sources.[ARRAY_N].Media = source media query (string) */ -}}
{{- /* .Input.Sizes                   = frame sizes (optional,string) */ -}}
{{- /* .Input.CORS                    = cross-origin data (optional,string) */ -}}
{{- /* .Input.Relationship            = relationship data (optional,string) */ -}}
{{- /* .Input.Design                  = art design data (optional,string) */ -}}
{{- /* .Input.Preload                 = pre-load value (optional,string) */ -}}
{{- /* .Input.Control                 = control interface flag (optional,bool) */ -}}
{{- /* .Input.Autoplay                = autoplay flag (optional,bool) */ -}}
{{- /* .Input.Loop                    = looping flag (optional,bool) */ -}}
{{- /* .Input.Mute                    = mute audio flag (optional,bool) */ -}}
{{- /* .Input.Inline                  = inline playing flag (optional,bool) */ -}}
{{- /* .Input.Tracks                  = track (e.g. VTT) list (optional,map) */ -}}
{{- /* .Input.Tracks.[LANG].URL       = track source file URL (url) */ -}}
{{- /* .Input.Tracks.[LANG].Kind      = track kind (string) */ -}}
{{- /* .Input.Tracks.[LANG].Label     = track label (string) */ -}}
{{- /* .Input.Tracks.[LANG].Default   = track default flag (optional,bool) */ -}}




{{- /* prepare working variables for this function */ -}}
{{- $Page := partial "Hestia/functions/data/Clean" . -}}
{{- $dataList := dict -}}
{{- $console := dict -}}
{{- $ret := false -}}




{{- /* STAGE 1: PROCESS EACH FIELDS */ -}}
{{- /* process .Name */ -}}
{{- $ret = partial "Hestia/functions/data/media/_name" . -}}
{{- $dataList = merge $dataList (dict "Name" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Name: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Width */ -}}
{{- $ret = partial "Hestia/functions/data/media/_width" . -}}
{{- $dataList = merge $dataList (dict "Width" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Width: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Height */ -}}
{{- $ret = partial "Hestia/functions/data/media/_height" . -}}
{{- $dataList = merge $dataList (dict "Height" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Height: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Sources */ -}}
{{- $ret = partial "Hestia/functions/data/media/_sources" . -}}
{{- $dataList = merge $dataList (dict "Sources" false) -}}
{{- $dataList = merge $dataList (dict "Sources" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Sources: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .CORS */ -}}
{{- $ret = partial "Hestia/functions/data/media/_cors" . -}}
{{- $dataList = merge $dataList (dict "CORS" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.CORS: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Relationship */ -}}
{{- $ret = partial "Hestia/functions/data/media/_relationship" . -}}
{{- $dataList = merge $dataList (dict "Relationship" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Relationship: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Design */ -}}
{{- $ret = partial "Hestia/functions/data/media/_design" . -}}
{{- $dataList = merge $dataList (dict "Design" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Design: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Preload */ -}}
{{- $ret = partial "Hestia/functions/data/media/_preload" . -}}
{{- $dataList = merge $dataList (dict "Preload" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Preload: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Control */ -}}
{{- $ret = partial "Hestia/functions/data/media/_control" . -}}
{{- $dataList = merge $dataList (dict "Control" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Control: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Autoplay */ -}}
{{- $ret = partial "Hestia/functions/data/media/_autoplay" . -}}
{{- $dataList = merge $dataList (dict "Autoplay" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Autoplay: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Loop */ -}}
{{- $ret = partial "Hestia/functions/data/media/_loop" . -}}
{{- $dataList = merge $dataList (dict "Loop" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Loop: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Mute */ -}}
{{- $ret = partial "Hestia/functions/data/media/_mute" . -}}
{{- $dataList = merge $dataList (dict "Mute" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Mute: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Inline */ -}}
{{- $ret = partial "Hestia/functions/data/media/_inline" . -}}
{{- $dataList = merge $dataList (dict "Inline" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Inline: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}


{{- /* process .Tracks */ -}}
{{- $ret = partial "Hestia/functions/data/media/_tracks" . -}}
{{- $dataList = merge $dataList (dict "Tracks" false) -}}
{{- $dataList = merge $dataList (dict "Tracks" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Tracks: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}




{{- /* STAGE 2: POST-PROCESS */ -}}
{{- /* process .Sizes */ -}}
{{- $ret = merge $Page (dict "Input" $dataList) -}}
{{- $ret = merge $ret (dict "Input" (dict "Sizes" .Input.Sizes)) -}}
{{- $ret = partial "Hestia/functions/data/media/_sizes" $ret -}}
{{- $dataList = merge $dataList (dict "Sizes" $ret.Output) -}}
{{- if and $ret.Console (not $console) -}}
	{{- $console = printf "Media.Sizes: %v" $ret.Console.Message -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}
{{- $dataList = merge $dataList (dict "Sizes" $ret.Output) -}}




{{- /* render output */ -}}
{{- return dict "Output" $dataList "Console" $console -}}
