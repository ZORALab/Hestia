{{- /* INPUT PARAMETERS */ -}}
{{- /* . = Page data in Hestia Structure */ -}}
{{- /* .Input.Data = string for processing */ -}}

{{- /* CONSTANTS */ -}}
{{- $CONST_NUMBER_FORMAT := `^((0?b[01]+$)|(0x[0-9a-fA-F]+$)|(0o[0-7]+$)|([0-9]+$)|(\d+\.?\d+((?:e|E)?-?\d+)?$))` -}}
{{- $CONST_INT_FORMAT := `^((0?b[01]+$)|(0x[0-9a-fA-F]+$)|(0o[0-7]+$)|([0-9]+$))` -}}
{{- $CONST_FLOAT_FORMAT := `^\d+\.?\d+((?:e|E)?-?\d+)?$` -}}




{{- /* prepare working variables for this function */ -}}
{{- $dataList := 0 -}}
{{- $console := dict -}}
{{- $ret := "" -}}




{{- /* pre-process string */ -}}
{{- $ret = partial "Hestia/functions/data/string/TrimWhitespace" . -}}
{{- $ret = partial "Hestia/functions/data/string/Init" $ret -}}
{{- if $ret.Console -}}
	{{- $console = printf "bad string: '%v'\n" .Input.Data -}}
	{{- $console = dict "Message" $console -}}
	{{- $ret = "" -}}
{{- else -}}
	{{- $ret = $ret.Output -}}
{{- end -}}




{{- /* process number */ -}}
{{- if $ret -}}
	{{- /* scan for convertable number */ -}}
	{{- $dataList = findRE $CONST_NUMBER_FORMAT $ret -}}


	{{- /* attempt to convert into number */ -}}
	{{- if findRE $CONST_INT_FORMAT (index $dataList 0) -}}
		{{- $dataList = int (index $dataList 0) -}}
	{{- else if findRE $CONST_FLOAT_FORMAT (index $dataList 0) -}}
		{{- $dataList = float (index $dataList 0) -}}
	{{- else -}}
		{{- $dataList = 0 -}}
		{{- if not $console -}}
			{{- $console = printf "invalid string: '%v'\n" .Input.Data -}}
			{{- $console = dict "Message" $console -}}
		{{- end -}}
	{{- end -}}
{{- end -}}




{{- /* render output */ -}}
{{- return dict "Output" $dataList "Console" $console -}}
