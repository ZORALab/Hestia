{{- /* INPUT PARAMETERS */ -}}
{{- /* .  = Hugo data structure  */ -}}




{{- /* prepare working variables for this function */ -}}
{{- $dataList := dict -}}
{{- $list := dict -}}
{{- $url := false -}}
{{- $ret := false -}}




{{- /* process URL.Base */ -}}
{{- $url = urls.Parse .Site.BaseURL -}}
{{- $ret = "http" -}}
{{- if $url.Scheme -}}
	{{- $ret = $url.Scheme -}}
{{- end -}}
{{- $ret = printf "%s://%s" $ret (default "localhost" $url.Host) -}}

{{- if $url.Path -}}
	{{- $ret = printf "%s/%s"
		(strings.TrimSuffix "/" $ret)
		(strings.TrimPrefix "/" $url.Path)
	-}}
{{- end -}}

{{- $dataList = merge $dataList (dict "Base" (urls.Parse $ret)) -}}




{{- /* process URL.Current */ -}}
{{- $list = dict -}}


{{- $url = urls.Parse .Page.Permalink -}}
{{- $ret = "http" -}}
{{- if $url.Scheme -}}
	{{- $ret = $url.Scheme -}}
{{- end -}}
{{- $ret = printf "%s://%s" $ret (default "localhost" $url.Host) -}}


{{- if $url.Path -}}
	{{- $ret = printf "%s/%s" $ret (strings.TrimPrefix "/" $url.Path) -}}
{{- end -}}


{{- if $url.RawQuery -}}
	{{- $ret = printf "%s?%s" $ret $url.RawQuery -}}
{{- end -}}


{{- if $url.Fragment -}}
	{{- $ret = printf "%s#%s" $ret $url.Fragment -}}
{{- end -}}
{{- $list = merge $list (dict "Absolute" (urls.Parse $ret)) -}}


{{- $ret = strings.TrimPrefix $dataList.Base $list.Absolute -}}
{{- if not $ret -}}
	{{- $ret = "/" -}}
{{- else -}}
	{{- $ret = printf "/%s" $ret -}}
{{- end -}}
{{- $list = merge $list (dict "Relative" (urls.Parse $ret)) -}}


{{- $dataList = merge $dataList (dict "Current" $list) -}}




{{- /* render output */ -}}
{{- return dict "URL" $dataList -}}
