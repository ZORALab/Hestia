{{- /*
Copyright 2022 "Holloway" Chew, Kean Ho <kean.ho.chew@zoralab.com>
Copyright 2022 ZORALab Enterprise <tech@zoralab.com>


Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
*/ -}}
{{- /* INPUT PARAMETERS */ -}}
{{- /* . = input for processing (string) */ -}}

{{- /* CONSTANTS */ -}}
{{- $STATE_FX_FREE := 0 -}}
{{- $STATE_FX_OPEN := 1 -}}
{{- $STATE_FX_CLOSE := 2 -}}
{{- $STATE_FX_INSIDE := 3 -}}




{{- /* prepare working variables for this function */ -}}
{{- $dataList := slice -}}
{{- $console := dict -}}
{{- $fx := slice -}}
{{- $str := slice -}}
{{- $whitespace := slice -}}
{{- $state := $STATE_FX_FREE -}}
{{- $prev := "" -}}




{{- /* dissect string */ -}}
{{- range $i, $v := (split . "") -}}
	{{- if eq $v "{" -}}
		{{- if and (eq $state $STATE_FX_FREE) (eq $prev "-") -}}
			{{- /* buffer: '{{ ... -}}  ' <-- '{' == maybe a new Go fx */ -}}
			{{- $state = $STATE_FX_OPEN -}}

			{{- /* mature the previous Go fx */ -}}
			{{- $fx = append (delimit $whitespace "") $fx -}}
			{{- $fx = delimit $fx "" -}}
			{{- $fx = dict "Type" "func" "Value" $fx -}}
			{{- $dataList = append $fx $dataList -}}
			{{- $fx = slice -}}
			{{- $whitespace = slice -}}
			{{- $prev = "" -}}


		{{- else if eq $state $STATE_FX_FREE -}}
			{{- /* buffer: '' <-- '{' == maybe a Go fx */ -}}
			{{- $state = $STATE_FX_OPEN -}}


		{{- else if eq $state $STATE_FX_OPEN -}}
			{{- /* buffer: '{' <-- '{' == solid Go fx */ -}}
			{{- $state = $STATE_FX_INSIDE -}}
			{{- $prev = "{" -}}
			{{- $fx = append "{{" $fx -}}


		{{- else if eq $STATE_FX_CLOSE -}}
			{{- /* buffer: '{{...}' <-- '{' == part of Go fx */ -}}
			{{- $state = $STATE_FX_INSIDE -}}
			{{- if $prev -}}
				{{- $fx = append $prev $fx -}}
				{{- $prev = "" -}}
			{{- end -}}
			{{- $fx = append "{" $fx  -}}
		{{- end -}}
	{{- else if eq $v "}" -}}
		{{- if eq $state $STATE_FX_INSIDE -}}
			{{- /* buffer: '{{ ... ' <-- '}' == maybe closing Go fx */ -}}
			{{- $state = $STATE_FX_CLOSE -}}


		{{- else if and (eq $state $STATE_FX_CLOSE) (eq $prev "-") -}}
			{{- /* buffer: '{{ ... -}' <-- '}' == solid closing Go fx */ -}}
			{{- $state = $STATE_FX_FREE -}}
			{{- $fx = append "}}" $fx -}}


		{{- else if eq $state $STATE_FX_CLOSE -}}
			{{- /* buffer: '{{ ... }' <-- '}' == solid closing Go fx */ -}}
			{{- $state = $STATE_FX_FREE -}}
			{{- $fx = append "}}" $fx -}}
			{{- $fx = delimit $fx "" -}}
			{{- $fx = dict "Type" "func" "Value" $fx -}}
			{{- $dataList = append $fx $dataList -}}
			{{- $fx = slice -}}


		{{- else if eq $state $STATE_FX_OPEN -}}
			{{- /* buffer: '{' <-- '}' == invalid - solid string */ -}}
			{{- $state = $STATE_FX_FREE -}}
			{{- $str = append (delimit $whitespace "") $str -}}
			{{- $str = append "{}" $str -}}
			{{- $whitespace = slice -}}
		{{- else -}}
			{{- /* buffer: '...' <-- '}' == solid string */ -}}
			{{- $str = append (delimit $whitespace "") $str -}}
			{{- $str = append $v $str -}}
			{{- $whitespace = slice -}}
		{{- end -}}
	{{- else if eq $v "-" -}}
		{{- if and (eq $state $STATE_FX_INSIDE) (eq $prev "{") -}}
			{{- /* buffer: '{{' <-- '-' == solid Go fx */ -}}
			{{- $fx = append (slice "{{" "-") $whitespace -}}
			{{- $whitespace = slice -}}
			{{- $prev = "" -}}

			{{- /* mature previous string */ -}}
			{{- $str = delimit $str "" -}}
			{{- $str = dict "Type" "str" "Value" $str -}}
			{{- $dataList = append $str $dataList -}}
			{{- $str = slice -}}


		{{- else if eq $state $STATE_FX_INSIDE -}}
			{{- /* buffer: '{{ ... ' <-- '-' == possible closing Go fx */ -}}
			{{- $fx = append $v $fx -}}
			{{- $prev = "-" -}}


		{{- else if eq $state $STATE_FX_OPEN -}}
			{{- /* buffer: '{' <-- '-' == is a string */ -}}
			{{- $state = $STATE_FX_FREE -}}
			{{- $str = append "{-" $str -}}


		{{- else -}}
			{{- /* buffer: '...' <-- '-' == solid string */ -}}
			{{- $str = append (delimit $whitespace "") $str -}}
			{{- $str = append $v $str -}}
			{{- $whitespace = slice -}}
		{{- end -}}
	{{- else if eq $v " " | or (eq $v "\r") | or (eq $v "\n") -}}
		{{- if eq $state $STATE_FX_INSIDE (eq $prev "{") -}}
			{{- /* buffer: '{{' <-- ' ' == solid Go fx */ -}}
			{{- $fx = append $v $fx -}}
			{{- $prev = "" -}}

			{{- /* mature previous string */ -}}
			{{- $str = append (delimit $whitespace "") $str -}}
			{{- $str = delimit $str "" -}}
			{{- $str = dict "Type" "str" "Value" $str -}}
			{{- $dataList = append $str $dataList -}}
			{{- $str = slice -}}
			{{- $whitespace = slice -}}
			{{- $prev = "" -}}


		{{- else if eq $state $STATE_FX_INSIDE -}}
			{{- /* buffer: '{{ ...' <-- ' ' == solid Go fx */ -}}
			{{- $fx = append $v $fx -}}


		{{- else if eq $state $STATE_FX_FREE -}}
			{{- /* buffer: 'ABX' <-- ' ' == track whitespace */ -}}
			{{- $whitespace = append $v $whitespace -}}


		{{- else if eq $state $STATE_FX_OPEN -}}
			{{- /* buffer: '{' <-- ' ' == a string */ -}}
			{{- $state = $STATE_FX_FREE -}}

			{{- $str = append "{" $str -}}
			{{- $whitespace = append $v $whitespace -}}
		{{- end -}}
	{{- else -}}
		{{- if and (eq $state $STATE_FX_FREE) (eq $prev "-") -}}
			{{- /* buffer: '{{ ... -}}\n  ' <-- 'X' == end of Go fx */ -}}

			{{- /* mature previous Go fx */ -}}
			{{- $fx = append (delimit $whitespace "") $fx -}}
			{{- $fx = delimit $fx "" -}}
			{{- $fx = dict "Type" "func" "Value" $fx -}}
			{{- $dataList = append $fx $dataList -}}
			{{- $fx = slice -}}
			{{- $whitespace = slice -}}
			{{- $prev = "" -}}

			{{- /* append to string */ -}}
			{{- $str = append $v $str -}}


		{{- else if and (eq $state $STATE_FX_INSIDE) (eq $prev "{") -}}
			{{- /* buffer: '{{' <-- 'X' == solid Go fx */ -}}

			{{- /* mature previous string */ -}}
			{{- $str = append $whitespace $str -}}
			{{- $str = delimit $str "" -}}
			{{- $str = dict "Type" "str" "Value" $str -}}
			{{- $dataList = append $str $dataList -}}
			{{- $str = slice -}}
			{{- $whitespace = slice -}}
			{{- $prev = "" -}}


		{{- else if and (eq $state $STATE_FX_INSIDE) -}}
			{{- /* buffer: '{{ ...' <-- 'X' == solid Go fx */ -}}
			{{- $fx = append (delimit $whitespace "") $fx -}}
			{{- $fx = append $v $fx -}}
			{{- $whitespace = slice -}}


		{{- else -}}
			{{- /* buffer: '...' <-- 'X' == solid string */ -}}
			{{- $str = append (delimit $whitespace "") $str -}}
			{{- $str = append $v $str -}}
			{{- $whitespace = slice -}}
		{{- end -}}
	{{- end -}}
{{- end -}}




{{- /* run final checking and extraction */ -}}
{{- if eq $state $STATE_FX_FREE -}}
	{{- if eq $prev "-" -}}
		{{- /* buffer: '{{ ... -}}\n  ' */ -}}
		{{- $fx = append (delimit $whitespace "") $fx -}}
		{{- $fx = delimit $fx "" -}}
		{{- $fx = dict "Type" "func" "Value" $fx -}}
		{{- $dataList = append $fx $dataList -}}

		{{- $whitespace = slice -}}
	{{- end -}}


	{{- if $str -}}
		{{- /* buffer: '...\n  ' */ -}}
		{{- if $whitespace -}}
			{{- $str = append (delimit $whitespace "") $str -}}
		{{- end -}}

		{{- $str = delimit $str "" -}}
		{{- $str = dict "Type" "str" "Value" $str -}}
		{{- $dataList = append $str $dataList -}}
	{{- end -}}
{{- else if or (eq $state $STATE_FX_CLOSE) (eq $state $STATE_FX_INSIDE) -}}
	{{- $console = printf "improper function closure: %v\n" $fx -}}
	{{- $console = dict "Message" $console -}}
{{- end -}}




{{- /* render output */ -}}
{{- return dict "Output" $dataList "Console" $console -}}
