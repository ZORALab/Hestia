{{- /* INPUT PARAMETERS */ -}}
{{- /* . = input for processing */ -}}




{{- /* prepare working variables for this function */ -}}
{{- $dataList := slice -}}
{{- $console := dict -}}
{{- $fx := slice -}}
{{- $inQuote := "" -}}
{{- $isSpaced := false -}}




{{- /* cleans up and standardize all string data */ -}}
{{- range $i, $v := (split . "") -}}
	{{- /* seek quotation to ignore or otherwise */ -}}
	{{- if (eq $v "'") | or (eq $v "\"") | or (eq $v "`") -}}
		{{- if eq $v $inQuote -}}
			{{- $inQuote = false -}}
			{{- $dataList = append (string (delimit $fx ""))
				$dataList -}}
			{{- $fx = slice -}}
		{{- else if not $inQuote -}}
			{{- $inQuote = $v -}}
		{{- end -}}
	{{- else if (eq $v " ")
			| or (eq $v "\t")
			| or (eq $v "\n")
			| or (eq $v "\r") -}}
		{{- if $inQuote -}}
			{{- $fx = append $v $fx -}}
		{{- else if $isSpaced -}}
			{{- /* DO NOTHING */ -}}
		{{- else -}}
			{{- if eq $v "\r" -}}
				{{- continue -}}
			{{- end -}}

			{{- $isSpaced = true -}}
			{{- $fx = delimit $fx "" -}}
			{{- if $fx -}}
				{{- $dataList = append (string $fx) $dataList -}}
			{{- end -}}

			{{- $fx = slice -}}
		{{- end -}}
	{{- else -}}
		{{- /* not a quote or whitespace */ -}}
		{{- $fx = append $v $fx -}}
		{{- $isSpaced = false -}}
	{{- end -}}
{{- end -}}



{{- if $inQuote -}}
	{{- $console = printf "unterminated quote: %v\n" (delimit $fx "") -}}
	{{- $console = dict "Message" $console -}}
{{- else -}}
	{{- $dataList = append (string (delimit $fx "")) $dataList -}}
{{- end -}}




{{- /* render output */ -}}
{{- return dict "Output" $dataList "Console" $console -}}
