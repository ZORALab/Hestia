{{- /* INPUT PARAMETERS */ -}}
{{- /* .context  = Page data in Hestia Structure  */ -}}
{{- /* .Input.Data = string data to process inline functions */ -}}




{{- /* prepare working variables for this function */ -}}
{{- $Page := . -}}
{{- $dataList := .Input.Data -}}
{{- $console := dict -}}
{{- $args := dict -}}
{{- $list := dict -}}
{{- $ret := false -}}
{{- $fx := false -}}




{{- /* STAGE 1 - parse all Go template functions */ -}}
{{- $ret = partial "Hestia/functions/data/string/__scanGoTemplateFunctions"
	.Input.Data -}}
{{- if $ret.Console -}}
	{{- $console = dict "Message" $ret.Console.Message -}}
{{- end -}}
{{- $ret = $ret.Output -}}


{{- $list = dict -}}
{{- range $i, $v := $ret -}}
	{{- /* remove Go template braces and whitespace */ -}}
	{{- $fx = strings.TrimLeft "\r\n\t {-" $v -}}
	{{- $fx = strings.TrimRight "\r\n\t }-" $fx -}}


	{{- /* remove Go template comments */ -}}
	{{- $fx = partial "Hestia/functions/data/string/__removeGoTemplateComments"
		$fx -}}
	{{- $fx = partial "Hestia/functions/data/string/TrimWhitespace" $fx -}}


	{{- /* split template functions segments when available */ -}}
	{{- if $fx -}}
		{{- $fx = partial "Hestia/functions/data/string/__splitArgs"
			$fx -}}
		{{- if and $fx.Console (not $console) -}}
			{{- $console = $fx.Console.Message -}}
			{{- $console = dict "Message" $console -}}
		{{- end -}}
		{{- $fx = $fx.Output -}}
	{{- end -}}


	{{- /* add to list */ -}}
	{{- $list = merge $list (dict $v $fx) -}}
{{- end -}}




{{- /* STAGE 2 - execute each Go template functions */ -}}
{{- range $k, $v := $list -}}
	{{- if not $v -}}
		{{- $list = merge $list (dict $k "") -}}
		{{- continue -}}
	{{- end -}}

	{{- /* check if it is data filler */ -}}
	{{- $args = dict -}}
	{{- $fx = index $v 0 -}}

	{{- if hasPrefix $fx "." -}}
		{{- $ret = dict "Input" (dict "Query" $fx) -}}
		{{- $ret = merge $Page $ret -}}
		{{- $ret = partial "Hestia/functions/data/Get" $ret -}}
		{{- $list = merge $list (dict $k $ret.Output) -}}
		{{- continue -}}
	{{- end -}}


	{{- /* assumes it is a function */ -}}
	{{- $fx = printf "Hestia/shortcodes/%s" $fx -}}


	{{- /* process argument list */ -}}
	{{- range $i, $x := $v -}}
		{{- if not (eq $i 0) -}}
			{{- $ret = split $x "=" -}}
			{{- $ret = dict (index $ret 0) (index $ret 1) -}}
			{{- $args = merge $args $ret -}}
		{{- end -}}
	{{- end -}}


	{{- /* search and executes Hestia/shortcodes */ -}}
	{{- $args = dict "Input" $args -}}
	{{- $args = merge $Page $args -}}

	{{- if partial "Hestia/functions/data/scan/FileExists"
			(printf "layouts/partials/%s" $fx) -}}
		{{- $ret = partial $fx $args -}}
	{{- else if not $console -}}
		{{- $console = printf "missing Hestia partial shortcode: %v\n"
			$k -}}
		{{- $console = dict "Message" $console -}}
	{{- end -}}


	{{- /* replace list value with processed values */ -}}
	{{- $list = merge $list (dict $k $ret) -}}
{{- end -}}




{{- /* STAGE 3 - replace every processed clauses */ -}}
{{- range $k, $v := $list -}}
	{{- $dataList = replace $dataList $k $v -}}
{{- end -}}




{{- /* render output */ -}}
{{- return dict "Output" (string $dataList) "Console" $console -}}
